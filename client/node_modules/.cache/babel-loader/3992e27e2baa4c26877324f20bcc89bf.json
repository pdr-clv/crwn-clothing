{"ast":null,"code":"import _objectSpread from \"/home/pdrclv/react/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n//aquí vamos a escribir toda la información del state relacionada con el usuario, y después se pasará a root-reducer.\n// es una función que recibe dos parametros, state inicial y el action (que es un objeto).\nimport UserActionTypes from './user.types';\nconst INITIAL_STATE = {\n  currentUser: null\n}; // se pasa el valor inicial al  state null, es como dar estructura de lo que será el state, y se inicia a cero o null en este caso. Parecido a como cuando se renderiza App, y cuando se monta, se le pasa el valor de User de auth. cuando se hace Login\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    // usando UserActionTypes, nos aseguramos de no cometer un error pasando el SET_CURRENT_USER sin errores de escritura.\n    case UserActionTypes.GOOGLE_SIGN_IN_SUCCESS:\n    case UserActionTypes.EMAIL_SIGN_IN_FAILURE:\n      return _objectSpread({}, state, {\n        currentUser: action.payload\n      });\n\n    case UserActionTypes.SET_CURRENT_USER:\n      return _objectSpread({}, state, {\n        currentUser: action.payload\n      });\n\n    case UserActionTypes.SET_CURRENT_USER:\n      return _objectSpread({}, state, {\n        currentUser: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/redux/user/user.reducer.js"],"names":["UserActionTypes","INITIAL_STATE","currentUser","userReducer","state","action","type","GOOGLE_SIGN_IN_SUCCESS","EMAIL_SIGN_IN_FAILURE","payload","SET_CURRENT_USER"],"mappings":";AAAA;AACA;AACA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE;AADO,CAAtB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACF;AACI,SAAKN,eAAe,CAACO,sBAArB;AACA,SAAKP,eAAe,CAACQ,qBAArB;AACE,+BACKJ,KADL;AAEEF,QAAAA,WAAW,EAACG,MAAM,CAACI;AAFrB;;AAIF,SAAKT,eAAe,CAACU,gBAArB;AACE,+BACKN,KADL;AAEEF,QAAAA,WAAW,EAACG,MAAM,CAACI;AAFrB;;AAIF,SAAKT,eAAe,CAACU,gBAArB;AACE,+BACKN,KADL;AAEEF,QAAAA,WAAW,EAACG,MAAM,CAACI;AAFrB;;AAIF;AACE,aAAOL,KAAP;AAnBJ;AAqBD,CAtBD;;AAwBA,eAAeD,WAAf","sourcesContent":["//aquí vamos a escribir toda la información del state relacionada con el usuario, y después se pasará a root-reducer.\n// es una función que recibe dos parametros, state inicial y el action (que es un objeto).\nimport UserActionTypes from './user.types';\n\nconst INITIAL_STATE = {\n  currentUser: null\n}\n\n// se pasa el valor inicial al  state null, es como dar estructura de lo que será el state, y se inicia a cero o null en este caso. Parecido a como cuando se renderiza App, y cuando se monta, se le pasa el valor de User de auth. cuando se hace Login\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n// usando UserActionTypes, nos aseguramos de no cometer un error pasando el SET_CURRENT_USER sin errores de escritura.\n    case UserActionTypes.GOOGLE_SIGN_IN_SUCCESS:\n    case UserActionTypes.EMAIL_SIGN_IN_FAILURE:\n      return {\n        ...state,\n        currentUser:action.payload\n      };\n    case UserActionTypes.SET_CURRENT_USER:\n      return {\n        ...state,\n        currentUser:action.payload\n      };\n    case UserActionTypes.SET_CURRENT_USER:\n      return {\n        ...state,\n        currentUser:action.payload\n      };\n    default:\n      return state;\n  } \n}\n\nexport default userReducer;"]},"metadata":{},"sourceType":"module"}