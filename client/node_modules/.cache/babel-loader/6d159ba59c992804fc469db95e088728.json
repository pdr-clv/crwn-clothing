{"ast":null,"code":"var _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component'; //ahora que shopPage está completamente desligado de props. Vamos a enrutarla, y añadirle rutas. \n\nimport { Route } from 'react-router-dom';\n/*  // forma primitiva, se llamaba así antes de incluir el listado shop en el state/store\nclass ShopPage extends React.Component{\n\tconstructor (props){\n\t\tsuper(props);\n\n\t\tthis.state = {collections:SHOP_DATA}\n\t}\n\n\trender(){\n\t\t//console.log(this.state); vemos que cargar this.state correctamente.\n\t\t// se pasa el valor this.state la variable {collections} brakets porque es objeto (D-structuring) a una variable collections, y se procesará cuando se llame al componente CollectionsPreview \n\t\tconst {collections} = this.state;\n\t\treturn (<div className='shop-page'>\n\t\t\t{collections.map(({id , ...otherCollectionsProps})=>(\n\t\t\t\t<CollectionPreview key={id} {...otherCollectionsProps} />\n\t\t\t))}\t\n\t\t</div>);\n\t}\n} */\n// tenemos acceso a las propiedades match, porque viene de una página enroutada de Página principal.\n// match.path tiene la información de la ruta donde está la página, y no hace falta escribirla manualmente. Así este componente es movible.\n\nconst ShopPage = ({\n  match\n}) => React.createElement(\"div\", {\n  className: \"shop-page\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, React.createElement(Route, {\n  exath: true,\n  path: `${match.path}`,\n  component: CollectionsOverview,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}));\n\nexport default ShopPage;","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","CollectionsOverview","Route","ShopPage","match","path"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC,C,CAEA;;AAEA,SAASC,KAAT,QAAsB,kBAAtB;AAGA;;;;;;;;;;;;;;;;;;;AAoBA;AACA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAChB;AAAK,EAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,KAAD;AAAO,EAAA,KAAK,MAAZ;AAAa,EAAA,IAAI,EAAG,GAAEA,KAAK,CAACC,IAAK,EAAjC;AAAoC,EAAA,SAAS,EAAEJ,mBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADD;;AAOA,eAAeE,QAAf","sourcesContent":["import React from 'react';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\n\n//ahora que shopPage está completamente desligado de props. Vamos a enrutarla, y añadirle rutas. \n\nimport { Route } from 'react-router-dom';\n\n\n/*  // forma primitiva, se llamaba así antes de incluir el listado shop en el state/store\nclass ShopPage extends React.Component{\n\tconstructor (props){\n\t\tsuper(props);\n\n\t\tthis.state = {collections:SHOP_DATA}\n\t}\n\n\trender(){\n\t\t//console.log(this.state); vemos que cargar this.state correctamente.\n\t\t// se pasa el valor this.state la variable {collections} brakets porque es objeto (D-structuring) a una variable collections, y se procesará cuando se llame al componente CollectionsPreview \n\t\tconst {collections} = this.state;\n\t\treturn (<div className='shop-page'>\n\t\t\t{collections.map(({id , ...otherCollectionsProps})=>(\n\t\t\t\t<CollectionPreview key={id} {...otherCollectionsProps} />\n\t\t\t))}\t\n\t\t</div>);\n\t}\n} */\n\n// tenemos acceso a las propiedades match, porque viene de una página enroutada de Página principal.\n// match.path tiene la información de la ruta donde está la página, y no hace falta escribirla manualmente. Así este componente es movible.\nconst ShopPage = ({ match }) => (\n\t<div className='shop-page'>\n\t\t<Route exath path={`${match.path}`} component={CollectionsOverview} />\n\t</div>\n);\n\n\nexport default ShopPage;"]},"metadata":{},"sourceType":"module"}