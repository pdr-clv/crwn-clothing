{"ast":null,"code":"import _objectSpread from \"/home/pdrclv/react/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSucess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nexport function* getSnapShotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapShot = yield userRef.get(); //    console.log(userSnapShot);\n\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapShot.id\n    }, userSnapShot.data())));\n  } catch (err) {\n    put(signInFailure(err));\n  }\n} //cuando se hace yield en onEmailSignInStart, se captura toda la action, y se tiene acceso como parametro al payload en este función de a continuación.\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    //    const userRef= yield auth.signInWithEmailAndPassword(googleProvider);\n    // lo desestructuramos el objeto userRef, y cogemos la propiedad user\n    const _ref = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref.user;\n\n    yield getSnapShotFromUserAuth(user);\n  } catch (err) {\n    put(signInFailure(err));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    //    const userRef= yield auth.signInWithPopup(googleProvider);\n    // lo desestructuramos el objeto userRef, y cogemos la propiedad user\n    const _ref2 = yield auth.signInWithPopup(googleProvider),\n          user = _ref2.user;\n\n    yield getSnapShotFromUserAuth(user);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* isUserAuthenticated() {\n  // crearemos una nueva utilidad de firebase, para comprobar si hay un usuario cargado, y si lo hay, lo cargamos al state, pero haremos unsubscribe, para no tenerlo ocupando memoria. sólo interesa captar cual es, y cargarlo al state.currentUser\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* signOutUser() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSucess());\n  } catch (err) {\n    yield put(signOutFailure(err));\n  }\n} // esta función recibe userCredentials, que son displayName, email and Password, se hace una desestructuración de objeto.\n\nexport function* signUpUser({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  //  yield console.log(email,password,displayName)\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user; //    console.log(user)\n\n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    })); //tenemos que escuchar, a signUpSuccess, si hay SingUpSuccess, se captará en onSigUpSuccess\n  } catch (err) {\n    yield put(signUpFailure(err));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpUser);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutUser);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInAfterSignUp({\n  payload: user,\n  additionalData\n}) {\n  yield getSnapShotFromUserAuth(user, additionalData);\n}\nexport function* onsignUpSuccess() {\n  //escuchamos si hemos hecho signUpSuccess, y pasado payload al user-reducer.  \n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onsignUpSuccess)]);\n}","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","googleProvider","auth","createUserProfileDocument","getCurrentUser","UserActionTypes","signInSuccess","signInFailure","signOutSucess","signOutFailure","signUpSuccess","signUpFailure","getSnapShotFromUserAuth","userAuth","additionalData","userRef","userSnapShot","get","id","data","err","signInWithEmail","payload","email","password","signInWithEmailAndPassword","user","signInWithGoogle","signInWithPopup","isUserAuthenticated","signOutUser","signOut","signUpUser","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","onSignOutStart","SIGN_OUT_START","onCheckUserSession","CHECK_USER_SESSION","onEmailSignInStart","EMAIL_SIGN_IN_START","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInAfterSignUp","onsignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport { googleProvider, \n  auth, \n  createUserProfileDocument,\n  getCurrentUser} from '../../firebase/firebase.utils';\n\nimport UserActionTypes from './user.types';\n\nimport { \n  signInSuccess, \n  signInFailure,\n  signOutSucess,\n  signOutFailure,\n  signUpSuccess,\n  signUpFailure\n} from './user.actions';\n\nexport function* getSnapShotFromUserAuth(userAuth,additionalData){\n  try{\n    const userRef = yield call(createUserProfileDocument, userAuth,additionalData);\n    const userSnapShot = yield userRef.get();\n//    console.log(userSnapShot);\n    yield put (signInSuccess({id:userSnapShot.id, ...userSnapShot.data()}));\n  } catch(err){\n    put(signInFailure(err));\n  }\n}\n\n//cuando se hace yield en onEmailSignInStart, se captura toda la action, y se tiene acceso como parametro al payload en este función de a continuación.\nexport function* signInWithEmail({payload:{ email, password }}){\n  try{\n//    const userRef= yield auth.signInWithEmailAndPassword(googleProvider);\n// lo desestructuramos el objeto userRef, y cogemos la propiedad user\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch(err){\n    put(signInFailure(err));\n  }\n}\n\nexport function* signInWithGoogle(){\n  try{\n//    const userRef= yield auth.signInWithPopup(googleProvider);\n// lo desestructuramos el objeto userRef, y cogemos la propiedad user\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch(err){\n    yield put (signInFailure(err));\n  }\n}\n\nexport function* isUserAuthenticated () {\n// crearemos una nueva utilidad de firebase, para comprobar si hay un usuario cargado, y si lo hay, lo cargamos al state, pero haremos unsubscribe, para no tenerlo ocupando memoria. sólo interesa captar cual es, y cargarlo al state.currentUser\n  try{\n    const userAuth= yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch(err){\n    yield put(signInFailure(err))\n  }\n}\n\nexport function* signOutUser () {\n  try{\n    yield auth.signOut();\n    yield put(signOutSucess());\n  } catch(err){\n    yield put(signOutFailure(err));\n  }\n}\n// esta función recibe userCredentials, que son displayName, email and Password, se hace una desestructuración de objeto.\nexport function* signUpUser({payload:{ email, password, displayName }}) {\n//  yield console.log(email,password,displayName)\n  try{\n    const {user} = yield auth.createUserWithEmailAndPassword(email,password);\n//    console.log(user)\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\n//tenemos que escuchar, a signUpSuccess, si hay SingUpSuccess, se captará en onSigUpSuccess\n  } catch(err){\n    yield put(signUpFailure(err));\n  } \n}\n\nexport function* onSignUpStart () {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpUser);\n}\n\nexport function* onSignOutStart () {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutUser);\n}\n\nexport function* onCheckUserSession () {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onEmailSignInStart(){\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onGoogleSignInStart(){\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInAfterSignUp({payload:user,additionalData}){\n  yield getSnapShotFromUserAuth(user, additionalData);\n}\n\nexport function* onsignUpSuccess() {\n//escuchamos si hemos hecho signUpSuccess, y pasado payload al user-reducer.  \n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSagas(){\n  yield all([call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onsignUpSuccess)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}