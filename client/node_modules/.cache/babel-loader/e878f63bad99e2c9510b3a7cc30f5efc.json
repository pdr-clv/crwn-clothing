{"ast":null,"code":"var _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'; // para que funcione Redux tenemos que importar el componente Provider y envolver todo el renderizado de la aplicación y el BrowserRouter \n//Provider es el componente padre que envuelve a toda la aplicación, y gracias a ello tendremos a acceder al valor store del state en cualquier parte o componente de la aplicación\n//hay que asignar la propiedad store a Provider, para que store del state sea accesible desde cualquier componente haciendo uso de la función de orden superior connect(maptoProps,dispatchtoProps)(\"Componente\")\n// hay que envolver a App con BrowserRouter para que funcione la \"paginacion\" o el routing\n\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'; // envolveremos el componente App con PersistGate para que pueda ser persistente el state.\n// forma primitiva , ahora hay que importar store and persitstore\n//import store from './redux/store';\n\nimport { store, persistor } from './redux/store';\nimport './index.css';\nimport App from './App'; // se le pasa al PersistGate las propiedades del persistor declarado en store.\n// persist detecta si hay algo en el state cuando se refresca el navegador. Si hay algo, cuando vuelve a cargar la página web, el state se quedará a cero, pero se disparará el action del persist, que hará que vuelva a cargar todo lo que había en el state, antes de refrescar el navegador\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, React.createElement(PersistGate, {\n  persistor: persistor,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n})))), document.getElementById('root'));","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/index.js"],"names":["React","ReactDOM","BrowserRouter","Provider","PersistGate","store","persistor","App","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,QAA6B,kBAA7B,C,CACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA2B,iCAA3B,C,CACA;AAEA;AACA;;AAEA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,eAAjC;AAIA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;AAEA;;AACAN,QAAQ,CAACO,MAAT,CACC,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,WAAD;AAAa,EAAA,SAAS,EAAEC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADD,CADD,CADD,EAQGG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CARH","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter} from 'react-router-dom';\n// para que funcione Redux tenemos que importar el componente Provider y envolver todo el renderizado de la aplicación y el BrowserRouter \n//Provider es el componente padre que envuelve a toda la aplicación, y gracias a ello tendremos a acceder al valor store del state en cualquier parte o componente de la aplicación\n//hay que asignar la propiedad store a Provider, para que store del state sea accesible desde cualquier componente haciendo uso de la función de orden superior connect(maptoProps,dispatchtoProps)(\"Componente\")\n// hay que envolver a App con BrowserRouter para que funcione la \"paginacion\" o el routing\nimport { Provider } from 'react-redux';\nimport { PersistGate} from 'redux-persist/integration/react';\n// envolveremos el componente App con PersistGate para que pueda ser persistente el state.\n\n// forma primitiva , ahora hay que importar store and persitstore\n//import store from './redux/store';\n\nimport { store, persistor } from './redux/store';\n\n\n\nimport './index.css';\nimport App from './App';\n\n// se le pasa al PersistGate las propiedades del persistor declarado en store.\n\n// persist detecta si hay algo en el state cuando se refresca el navegador. Si hay algo, cuando vuelve a cargar la página web, el state se quedará a cero, pero se disparará el action del persist, que hará que vuelva a cargar todo lo que había en el state, antes de refrescar el navegador\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<BrowserRouter>\n\t\t\t<PersistGate persistor={persistor}>\n\t\t\t\t<App />\n\t\t\t</PersistGate>\n\t\t</BrowserRouter>\n\t</Provider>\n\t, document.getElementById('root'));\n\n"]},"metadata":{},"sourceType":"module"}