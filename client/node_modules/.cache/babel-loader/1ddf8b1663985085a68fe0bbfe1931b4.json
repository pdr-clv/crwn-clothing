{"ast":null,"code":"import _objectSpread from \"/home/pdrclv/react/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyC8jajl6VngHSsqroaGiCsmNGC53-7e00M\",\n  authDomain: \"crwn-db-71e6c.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-71e6c.firebaseio.com\",\n  projectId: \"crwn-db-71e6c\",\n  storageBucket: \"crwn-db-71e6c.appspot.com\",\n  messagingSenderId: \"171761656914\",\n  appId: \"1:171761656914:web:d33aefd03fa33a9cf2eb8b\",\n  measurementId: \"G-6NMMPF19ST\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // si el usuario no está logeado o sign ineado, return, y no se sigue ejecutando nada mas.\n  if (!userAuth) return; // se le pasa el valor userAuth.uid como valor del documento, para ver si exite ese userRef, y se comprobará si existe ese uid en la colección users,  \n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // snapShot tiene datos, y existe la propiedad exists es falso, se ejecutará el códdigo que hay dentro del if.\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (err) {\n      console.error('error creando usuario', err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAgBC,cAAhB,KAAmC;AAC5E;AACE,MAAI,CAACD,QAAL,EAAe,OAF2D,CAG5E;;AACE,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAE,MAAMJ,OAAO,CAACK,GAAR,EAAtB,CAN0E,CAO5E;;AACE,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAAA,UACbC,WADa,GACST,QADT,CACbS,WADa;AAAA,UACAC,KADA,GACSV,QADT,CACAU,KADA;AAEpB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDV,cAJC,EAAN;AAMD,KAPD,CAOE,OAAOa,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAsCF,GAAG,CAACG,OAA1C;AACD;AACF;;AAED,SAAOf,OAAP;AAED,CA1BM;AA4BPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAC;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: \"AIzaSyC8jajl6VngHSsqroaGiCsmNGC53-7e00M\",\n  authDomain: \"crwn-db-71e6c.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-71e6c.firebaseio.com\",\n  projectId: \"crwn-db-71e6c\",\n  storageBucket: \"crwn-db-71e6c.appspot.com\",\n  messagingSenderId: \"171761656914\",\n  appId: \"1:171761656914:web:d33aefd03fa33a9cf2eb8b\",\n  measurementId: \"G-6NMMPF19ST\"\n};\n\nexport const createUserProfileDocument = async (userAuth,additionalData) => {\n// si el usuario no está logeado o sign ineado, return, y no se sigue ejecutando nada mas.\n  if (!userAuth) return;\n// se le pasa el valor userAuth.uid como valor del documento, para ver si exite ese userRef, y se comprobará si existe ese uid en la colección users,  \n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  \n  const snapShot= await userRef.get();\n// snapShot tiene datos, y existe la propiedad exists es falso, se ejecutará el códdigo que hay dentro del if.\n  if (!snapShot.exists) {\n    const {displayName, email} = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      })\n    } catch (err) {\n      console.error('error creando usuario',err.message);\n    }\n  }\n\n  return userRef;\n\n}\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt:'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}