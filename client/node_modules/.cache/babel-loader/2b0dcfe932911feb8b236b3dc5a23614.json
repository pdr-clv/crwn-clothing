{"ast":null,"code":"import _objectSpread from \"/home/pdrclv/react/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  // esta función devuelve un nuevo array, añadiendo la cantidad que hay de items, si el item que se va a añadir está repetido, y si no, te añade cantidad 1.\n  //primero comprobamos si existe un id identico de item en el array cartItems que hay en en store  \n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id); // si existe un CartItem identico (existingCartItem = true), se mapea el array existente en el store, esto devolverá un array nuevo, condición necesaria, y la cantidad se aumentará en uno, donde coincida el id del item que hay en el store, con el que se va añadir (itemToAdd)\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === cartItemToAdd.id ? _objectSpread({}, cartItem, {\n      quantity: cartItem.quantity + 1\n    }) : cartItem);\n  } else {\n    // este return, lo que hace es hacer un push a todos los cartItems con lo que está detrás de la coma. Si se pasara un cartitems null, o que no estuviera, se añadería la propiedad quantity = 1. De esta manera siempre vamos a tener quantity en todas los cartItems que haya en el store.\n    // importante, para que funcione el push, poner [...cartitems], no olvidar los 3 puntitos ...\n    return [...cartItems, _objectSpread({}, cartItemToAdd, {\n      quantity: 1\n    })];\n  }\n};","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity"],"mappings":";AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAWC,aAAX,KAA6B;AAC1D;AACA;AACE,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EADrB,CAAzB,CAHwD,CAM1D;;AACE,MAAIH,gBAAJ,EAAsB;AACpB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IAC3BA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,qBAEKD,QAFL;AAEgBG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAF9C,SAIAH,QALK,CAAP;AAOD,GARD,MAQO;AACT;AACA;AACI,WAAO,CAAC,GAAGJ,SAAJ,oBAAoBC,aAApB;AAAoCM,MAAAA,QAAQ,EAAC;AAA7C,OAAP;AACD;AACF,CApBM","sourcesContent":["export const addItemToCart = (cartItems,cartItemToAdd) => {\n// esta función devuelve un nuevo array, añadiendo la cantidad que hay de items, si el item que se va a añadir está repetido, y si no, te añade cantidad 1.\n//primero comprobamos si existe un id identico de item en el array cartItems que hay en en store  \n  const existingCartItem = cartItems.find(\n      cartItem => cartItem.id === cartItemToAdd.id\n    );\n// si existe un CartItem identico (existingCartItem = true), se mapea el array existente en el store, esto devolverá un array nuevo, condición necesaria, y la cantidad se aumentará en uno, donde coincida el id del item que hay en el store, con el que se va añadir (itemToAdd)\n  if (existingCartItem) {\n    return cartItems.map(cartItem=>\n      cartItem.id === cartItemToAdd.id\n      ?\n      { ...cartItem , quantity: cartItem.quantity + 1 }\n      :\n      cartItem\n    )\n  } else {\n// este return, lo que hace es hacer un push a todos los cartItems con lo que está detrás de la coma. Si se pasara un cartitems null, o que no estuviera, se añadería la propiedad quantity = 1. De esta manera siempre vamos a tener quantity en todas los cartItems que haya en el store.\n// importante, para que funcione el push, poner [...cartitems], no olvidar los 3 puntitos ...\n    return [...cartItems, { ...cartItemToAdd , quantity:1 }]\n  }\n}"]},"metadata":{},"sourceType":"module"}