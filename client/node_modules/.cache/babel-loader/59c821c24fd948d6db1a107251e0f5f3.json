{"ast":null,"code":"var _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/App.js\";\nimport React from 'react'; //capitulo 67: propiedades match,location y history. Muy interesante para ver como dirigirse a las rutas y url, utilizando history, :id, etc.\n\nimport { Route, Switch, Redirect } from 'react-router-dom'; //El componente Redirect vale para hacer redirect si se cumple alguna condición en la ruta de la url.\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from './redux/user/user.selectors'; // Route permite que se pueda hacer paginacion e ir a los /algo.\n//Switch se encarga de que en cuanto coincida una, ya no busque mas /algo\n\nimport HomePage from './pages/homepage/homepage.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'; //import { auth, createUserProfileDocument} from './firebase/firebase.utils';\n// se importa setCurrentUser, el action que obtendrá el CurrentUser el store, que está en el user.reducer y root-reducer. Se utilizará esta función en el dispatch (envio de currentUser como Props)\n\nimport { checkUserSession } from './redux/user/user.actions';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    // cuando se monta el componente, se carga App, y se mirará a ver si hay un usuario logueado. \n    // se pasará a user Saga el evento checkUserSession, y el saga lo interceptará, y dirigirá la actividad para dejar el usuari logueado, si existiria, o para no hacer nada, si no hubiera usuario logueado.\n    const checkUserSession = this.props.checkUserSession;\n    checkUserSession(); //hacemos una desestructuración de setCurrentUser de this.props.\n    //    const {setCurrentUser} = this.props;\n\n    /*  this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth =>{\n        if (userAuth) {\n          const userRef = await createUserProfileDocument(userAuth);\n          \n          userRef.onSnapshot(snapShot =>{\n    // se reemplaza el this.setState por setCurrentUser\n    /*          this.setState({\n              currentUser:{\n                id:snapShot.id,\n                ...snapShot.data()\n              }\n            }) \n            setCurrentUser({\n              id:snapShot.id,\n              ...snapShot.data()\n            })\n          });\n        } else {\n          //this.setState({currentUser:userAuth});\n    // ya no hace falta hacer this.setState, y el currentUser: se le pasa directamente el objeto userAuth.\n          setCurrentUser(userAuth);\n        } \n    // hemos utilizado esta función para añadir la colección 'collections' a nuestro firebase. se ha pasado un collectionsArray que se ha cargado desde el selector, y se ha hecho un map y una desectructuración de title e item, que eran los únicos objetos que queriamos poner en el firebase.\n    // hemos pasado unicamente title e items, puesto que route o id, se calcularán id y route cuando carguemos la información desde backend al store de redux\n    //      addCollectionAndDocuments('collections',collectionsArray.map(({title,items})=>({title,items})));\n      });*/\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  } // para que funcione Swtich, hay que envolver Route\n  //Route necesita los parametros exact (tiene que ser exacto el /),path, que es la ruta que estará ingresada en el url, y component que es el componente (que normalmente será una página creada por nosotros, que se cargará)\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }) : React.createElement(SignInAndSignUpPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })));\n  }\n\n} // el path de shop no se pone exact, porque eventualmente se pasará parametros al url /shop/idproducto.\n//render dentro de Route te permite renderizar la página SigInAndSignOut si se cumple una condición del currentUser es null\n//cuando llamamos a mapStateToProps, disgregamos user del state. al ser App componente de clase, para utilizar el valor currentUser, hay que hacer this.props.currentUser\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); // podemos pasar el valor currentUser que está guardado en el root-reducer o el store del state. Lo podemos utilizar haciendo this.props.currentUser\n//checkUserSession se comprobará en componentDidMount para saber si hay un usuario logueado o o no.\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n}); //con mapDispatchToProps se enviará el cambio de estado registrado con setCurrentUser al rootReducer, a través del action. Con esto evitaremos tener que guardar el state en this.state, ya que se guardará en el rootreducer, y el evento this.setState.setCurrentUser se cambiará a this.props.SetCurrentUser (App es componente de clase, y se tiene que poner this.props antes de SetCurrentUser) que se encuentra en el action, y se pasa al reducer.\n//haciendo esto. setCurrentUser es una función que asigna el usuario al state, se puede utilizar haciendo this.props.setCurrentUser.\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/App.js"],"names":["React","Route","Switch","Redirect","connect","createStructuredSelector","selectCurrentUser","HomePage","CheckoutPage","ShopPage","Header","SignInAndSignUpPage","checkUserSession","App","Component","unsubscribeFromAuth","componentDidMount","props","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,KAAT,EAAeC,MAAf,EAAsBC,QAAtB,QAAsC,kBAAtC,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,iBAAT,QAAkC,6BAAlC,C,CAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,qCAArB;AAEA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC,C,CACA;AACA;;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBb,KAAK,CAACc,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAUhCC,mBAVgC,GAUV,IAVU;AAAA;;AAYhCC,EAAAA,iBAAiB,GAAE;AACrB;AACA;AAFqB,UAITJ,gBAJS,GAIY,KAAKK,KAJjB,CAITL,gBAJS;AAMjBA,IAAAA,gBAAgB,GANC,CAQrB;AACA;;AAEE;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BC;;AAEDM,EAAAA,oBAAoB,GAAE;AACpB,SAAKH,mBAAL;AACD,GArD+B,CAsDlC;AACA;;;AACEI,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEZ,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEE,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,WAAlB;AAA8B,MAAA,SAAS,EAAED,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,SAAlB;AAA4B,MAAA,MAAM,EAAE,MAAM,KAAKS,KAAL,CAAWG,WAAX,GAA0B,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA1B,GAAkD,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAFF,CADF;AAWD;;AApE+B,C,CAsElC;AACA;AACA;;;AACA,MAAMC,eAAe,GAAGhB,wBAAwB,CAAC;AAC/Ce,EAAAA,WAAW,EAAEd;AADkC,CAAD,CAAhD,C,CAIA;AAEA;;AACA,MAAMgB,kBAAkB,GAAGC,QAAQ,KAAI;AACrCX,EAAAA,gBAAgB,EAAE,MAAMW,QAAQ,CAACX,gBAAgB,EAAjB;AADK,CAAJ,CAAnC,C,CAGA;AACA;;;AACA,eAAeR,OAAO,CAACiB,eAAD,EAAiBC,kBAAjB,CAAP,CAA4CT,GAA5C,CAAf","sourcesContent":["import React from 'react';\n//capitulo 67: propiedades match,location y history. Muy interesante para ver como dirigirse a las rutas y url, utilizando history, :id, etc.\nimport { Route,Switch,Redirect } from 'react-router-dom';\n//El componente Redirect vale para hacer redirect si se cumple alguna condición en la ruta de la url.\nimport { connect } from 'react-redux';\n\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from './redux/user/user.selectors'; \n\n// Route permite que se pueda hacer paginacion e ir a los /algo.\n//Switch se encarga de que en cuanto coincida una, ya no busque mas /algo\nimport HomePage from './pages/homepage/homepage.component';\n\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\n//import { auth, createUserProfileDocument} from './firebase/firebase.utils';\n// se importa setCurrentUser, el action que obtendrá el CurrentUser el store, que está en el user.reducer y root-reducer. Se utilizará esta función en el dispatch (envio de currentUser como Props)\nimport { checkUserSession } from './redux/user/user.actions';\n\nimport './App.css';\n\n\nclass App extends React.Component {\n  \n//no necesitamos mas el constructor, porque el estado se guarddará en el root-reducer y el store del state\n  /*constructor() {\n    super();\n    this.state = {\n      currentUser: null\n    }\n  }*/\n\n  unsubscribeFromAuth = null\n\n  componentDidMount(){\n// cuando se monta el componente, se carga App, y se mirará a ver si hay un usuario logueado. \n// se pasará a user Saga el evento checkUserSession, y el saga lo interceptará, y dirigirá la actividad para dejar el usuari logueado, si existiria, o para no hacer nada, si no hubiera usuario logueado.\n\n    const { checkUserSession } = this.props;\n\n    checkUserSession()\n    \n//hacemos una desestructuración de setCurrentUser de this.props.\n//    const {setCurrentUser} = this.props;\n\n  /*  this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth =>{\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        \n        userRef.onSnapshot(snapShot =>{\n// se reemplaza el this.setState por setCurrentUser\n/*          this.setState({\n            currentUser:{\n              id:snapShot.id,\n              ...snapShot.data()\n            }\n          }) \n          setCurrentUser({\n            id:snapShot.id,\n            ...snapShot.data()\n          })\n        });\n      } else {\n        //this.setState({currentUser:userAuth});\n// ya no hace falta hacer this.setState, y el currentUser: se le pasa directamente el objeto userAuth.\n        setCurrentUser(userAuth);\n      } \n// hemos utilizado esta función para añadir la colección 'collections' a nuestro firebase. se ha pasado un collectionsArray que se ha cargado desde el selector, y se ha hecho un map y una desectructuración de title e item, que eran los únicos objetos que queriamos poner en el firebase.\n// hemos pasado unicamente title e items, puesto que route o id, se calcularán id y route cuando carguemos la información desde backend al store de redux\n//      addCollectionAndDocuments('collections',collectionsArray.map(({title,items})=>({title,items})));\n    });*/\n  }\n\n  componentWillUnmount(){\n    this.unsubscribeFromAuth();\n  }\n// para que funcione Swtich, hay que envolver Route\n//Route necesita los parametros exact (tiene que ser exacto el /),path, que es la ruta que estará ingresada en el url, y component que es el componente (que normalmente será una página creada por nosotros, que se cargará)\n  render(){\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route exact path='/checkout' component={CheckoutPage} />\n          <Route exact path='/signin' render={() => this.props.currentUser ? (<Redirect to ='/'/>) : (<SignInAndSignUpPage />)} />\n        </Switch>\n      </div>\n    );\n  }\n}\n// el path de shop no se pone exact, porque eventualmente se pasará parametros al url /shop/idproducto.\n//render dentro de Route te permite renderizar la página SigInAndSignOut si se cumple una condición del currentUser es null\n//cuando llamamos a mapStateToProps, disgregamos user del state. al ser App componente de clase, para utilizar el valor currentUser, hay que hacer this.props.currentUser\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\n\n// podemos pasar el valor currentUser que está guardado en el root-reducer o el store del state. Lo podemos utilizar haciendo this.props.currentUser\n\n//checkUserSession se comprobará en componentDidMount para saber si hay un usuario logueado o o no.\nconst mapDispatchToProps = dispatch =>({\n  checkUserSession: () => dispatch(checkUserSession())\n});\n//con mapDispatchToProps se enviará el cambio de estado registrado con setCurrentUser al rootReducer, a través del action. Con esto evitaremos tener que guardar el state en this.state, ya que se guardará en el rootreducer, y el evento this.setState.setCurrentUser se cambiará a this.props.SetCurrentUser (App es componente de clase, y se tiene que poner this.props antes de SetCurrentUser) que se encuentra en el action, y se pasa al reducer.\n//haciendo esto. setCurrentUser es una función que asigna el usuario al state, se puede utilizar haciendo this.props.setCurrentUser.\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}