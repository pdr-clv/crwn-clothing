{"ast":null,"code":"import { createSelector } from 'reselect'; //memoize genera un array en el cual se encuentran valores a los cuales se puede acceder de una forma mas directa, y no hace falta que se toque el resto del objeto state en el store. Se generan selectores del state, y el resto del state no se toca, y así no se actualizará, ni generará renders automáticos al actualizar una parte del state que no hace falta.\n// esta primera función simplemente devuelve una pequeña posición del state guardado en el store, devuelve solo cart\n\nconst selectCart = state => state.cart; // necesitamos este primer selectCart porque se le pasará a la primera vez que vamos a utilizar createSelector\n//create Selector recoge dos argumentos, primero un array con todas las colecciones de los input selectors (en este caso state.cart)\n// el segndo valor es una función en la que se encuentra el valor que queremos buscar en dicha colección pasada en el primer argumento\n\n\nexport const selectCartItems = createSelector([selectCart], cart => cart.cartItems); //hemos creado un selector que selecciona todos los CartItems que se encuentran en el state, y en la propiedad cart, y el resto no los toca.\n//si queremos ahora hacer ahora algun procedimiento o función, que sólo necesite cartItems como parametros, se puede coger este selectCartItems, sin necesidad de coger nada mas.\n\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0));\nexport const selectCartHidden = createSelector([selectCart], cart => cart.hidden);\nexport const selectCartItemsPrice = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity * cartItem.price, 0));","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartHidden","hidden","selectCartItemsPrice","price"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CACA;AACA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAEA;AAEA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,EAE3CE,IAAI,IAAIA,IAAI,CAACE,SAF8B,CAAtC,C,CAKP;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAGN,cAAc,CAChD,CAACI,eAAD,CADgD,EAEhDC,SAAS,IACPA,SAAS,CAACE,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAFnC,EAGE,CAHF,CAH8C,CAA3C;AAUP,OAAO,MAAMC,gBAAgB,GAAGX,cAAc,CAC5C,CAACC,UAAD,CAD4C,EAE5CE,IAAI,IAAIA,IAAI,CAACS,MAF+B,CAAvC;AAKP,OAAO,MAAMC,oBAAoB,GAAGb,cAAc,CAChD,CAACI,eAAD,CADgD,EAEhDC,SAAS,IACPA,SAAS,CAACE,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACK,KAFvD,EAGE,CAHF,CAH8C,CAA3C","sourcesContent":["import { createSelector } from 'reselect';\n//memoize genera un array en el cual se encuentran valores a los cuales se puede acceder de una forma mas directa, y no hace falta que se toque el resto del objeto state en el store. Se generan selectores del state, y el resto del state no se toca, y así no se actualizará, ni generará renders automáticos al actualizar una parte del state que no hace falta.\n// esta primera función simplemente devuelve una pequeña posición del state guardado en el store, devuelve solo cart\nconst selectCart = state => state.cart;\n\n// necesitamos este primer selectCart porque se le pasará a la primera vez que vamos a utilizar createSelector\n\n//create Selector recoge dos argumentos, primero un array con todas las colecciones de los input selectors (en este caso state.cart)\n// el segndo valor es una función en la que se encuentra el valor que queremos buscar en dicha colección pasada en el primer argumento\nexport const selectCartItems = createSelector(\n  [selectCart],\n  cart => cart.cartItems\n);\n\n//hemos creado un selector que selecciona todos los CartItems que se encuentran en el state, y en la propiedad cart, y el resto no los toca.\n//si queremos ahora hacer ahora algun procedimiento o función, que sólo necesite cartItems como parametros, se puede coger este selectCartItems, sin necesidad de coger nada mas.\n\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  cartItems => \n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity,\n      0\n    )\n);\n\nexport const selectCartHidden = createSelector(\n  [selectCart],\n  cart => cart.hidden\n);\n\nexport const selectCartItemsPrice = createSelector(\n  [selectCartItems],\n  cartItems => \n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity * cartItem.price,\n      0\n    )\n);"]},"metadata":{},"sourceType":"module"}