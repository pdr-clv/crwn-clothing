{"ast":null,"code":"import _objectSpread from \"/home/pdrclv/react/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/App.js\";\nimport React from 'react'; //capitulo 67: propiedades match,location y history. Muy interesante para ver como dirigirse a las rutas y url, utilizando history, :id, etc.\n\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux'; // Route permite que se pueda hacer paginacion e ir a los /algo.\n//Switch se encarga de que en cuanto coincida una, ya no busque mas /algo\n\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils'; // se importa setCurrentUser, el action que obtendrá el CurrentUser el store, que está en el user.reducer y root-reducer. Se utilizará esta función en el dispatch (envio de currentUser como Props)\n\nimport { setCurrentUser } from './redux/user/user.actions';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    //hacemos una desestructuración de setCurrentUser de this.props.\n    const setCurrentUser = this.props.setCurrentUser;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        userRef.onSnapshot(snapShot => {\n          // se reemplaza el this.setState por setCurrentUser\n\n          /*          this.setState({\n                      currentUser:{\n                        id:snapShot.id,\n                        ...snapShot.data()\n                      }\n                    }) */\n          setCurrentUser(_objectSpread({\n            id: snapShot.id\n          }, snapShot.data()));\n        });\n      } else {\n        //this.setState({currentUser:userAuth});\n        // ya no hace falta hacer this.setState, y el currentUser: se le pasa directamente el objeto userAuth.\n        setCurrentUser(userAuth);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  } // para que funcione Swtich, hay que envolver Route\n  //Route necesita los parametros exact (tiene que ser exacto el /),path, que es la ruta que estará ingresada en el url, y component que es el componente (que normalmente será una página creada por nosotros, que se cargará)\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/signin\",\n      component: SignInAndSignUpPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/App.js"],"names":["React","Route","Switch","connect","HomePage","ShopPage","Header","SignInAndSignUpPage","auth","createUserProfileDocument","setCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","mapDispatchToProps","dispatch","user"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,KAAT,EAAeC,MAAf,QAA6B,kBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,2BAAhD,C,CACA;;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAUhCC,mBAVgC,GAUV,IAVU;AAAA;;AAYhCC,EAAAA,iBAAiB,GAAE;AACrB;AADqB,UAEVJ,cAFU,GAEQ,KAAKK,KAFb,CAEVL,cAFU;AAIjB,SAAKG,mBAAL,GAA2BL,IAAI,CAACQ,kBAAL,CAAwB,MAAMC,QAAN,IAAiB;AAClE,UAAIA,QAAJ,EAAc;AACZ,cAAMC,OAAO,GAAG,MAAMT,yBAAyB,CAACQ,QAAD,CAA/C;AAEAC,QAAAA,OAAO,CAACC,UAAR,CAAmBC,QAAQ,IAAG;AACtC;;AACA;;;;;;AAMUV,UAAAA,cAAc;AACZW,YAAAA,EAAE,EAACD,QAAQ,CAACC;AADA,aAETD,QAAQ,CAACE,IAAT,EAFS,EAAd;AAID,SAZD;AAaD,OAhBD,MAgBO;AACL;AACR;AACQZ,QAAAA,cAAc,CAACO,QAAD,CAAd;AACD;AACF,KAtB0B,CAA3B;AAuBD;;AAEDM,EAAAA,oBAAoB,GAAE;AACpB,SAAKV,mBAAL;AACD,GA3C+B,CA4ClC;AACA;;;AACEW,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEpB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,SAAS,EAAEE,mBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAFF,CADF;AAUD;;AAzD+B;;AA4DlC,MAAMkB,kBAAkB,GAAGC,QAAQ,KAAI;AACrChB,EAAAA,cAAc,EAAEiB,IAAI,IAAID,QAAQ,CAAChB,cAAc,CAACiB,IAAD,CAAf;AADK,CAAJ,CAAnC;;AAIA,eAAexB,OAAO,CAAC,IAAD,EAAMsB,kBAAN,CAAP,CAAiCd,GAAjC,CAAf","sourcesContent":["import React from 'react';\n//capitulo 67: propiedades match,location y history. Muy interesante para ver como dirigirse a las rutas y url, utilizando history, :id, etc.\nimport { Route,Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n// Route permite que se pueda hacer paginacion e ir a los /algo.\n//Switch se encarga de que en cuanto coincida una, ya no busque mas /algo\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\n// se importa setCurrentUser, el action que obtendrá el CurrentUser el store, que está en el user.reducer y root-reducer. Se utilizará esta función en el dispatch (envio de currentUser como Props)\nimport { setCurrentUser } from './redux/user/user.actions';\n\nimport './App.css';\n\n\nclass App extends React.Component {\n  \n//no necesitamos mas el constructor, porque setCurrentUser optenido por el dispatch es suficiente.\n  /*constructor() {\n    super();\n    this.state = {\n      currentUser: null\n    }\n  }*/\n\n  unsubscribeFromAuth = null\n\n  componentDidMount(){\n//hacemos una desestructuración de setCurrentUser de this.props.\n    const {setCurrentUser} = this.props;\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth =>{\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        \n        userRef.onSnapshot(snapShot =>{\n// se reemplaza el this.setState por setCurrentUser\n/*          this.setState({\n            currentUser:{\n              id:snapShot.id,\n              ...snapShot.data()\n            }\n          }) */\n          setCurrentUser({\n            id:snapShot.id,\n            ...snapShot.data()\n          })\n        });\n      } else {\n        //this.setState({currentUser:userAuth});\n// ya no hace falta hacer this.setState, y el currentUser: se le pasa directamente el objeto userAuth.\n        setCurrentUser(userAuth);\n      } \n    });\n  }\n\n  componentWillUnmount(){\n    this.unsubscribeFromAuth();\n  }\n// para que funcione Swtich, hay que envolver Route\n//Route necesita los parametros exact (tiene que ser exacto el /),path, que es la ruta que estará ingresada en el url, y component que es el componente (que normalmente será una página creada por nosotros, que se cargará)\n  render(){\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route path='/signin' component={SignInAndSignUpPage} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch =>({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(null,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}