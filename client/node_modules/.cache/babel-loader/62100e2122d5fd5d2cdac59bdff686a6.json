{"ast":null,"code":"var _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/components/sign-up/sign-up.component.jsx\";\nimport React from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\nimport { signUpStart } from '../../redux/user/user.actions';\nimport { auth, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { TitleForm, SignUpContainer } from './sign-up.styles';\n\nclass SignUp extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            displayName = _this$state.displayName,\n            email = _this$state.email,\n            password = _this$state.password,\n            confirmPassword = _this$state.confirmPassword;\n      const signUpStart = this.props.signUpStart;\n\n      if (password !== confirmPassword) {\n        alert(\"Password and Confirm Password don't match\");\n        return;\n      }\n\n      signUpStart(displayName, email, password);\n      /*\t\ttry{\n      // auth.createUserWithEmailAndPassword es un método de firebase, que te permite crear un nuevo usuario pasandole email and password.\n      \t\t\tconst {user} = await auth.createUserWithEmailAndPassword(email,password);\n      \t\t\tawait createUserProfileDocument(user,{displayName});\n      // con esto dejaremos los inputs limpios, después de guardar el usuario\n      \t\t\tthis.setState({\n      \t\t\t\tdisplayName:'',\n      \t\t\t\temail:'',\n      \t\t\t\tpassword:'',\n      \t\t\t\tconfirmPassword:''\n      \t\t\t});\n      \t\t} catch (err){\n      \t\t\tconsole.error('error creando usuario',err.message);\n      \t\t\talert('Error creating new user \\n' + err.message);\n      \t\t}*/\n    };\n\n    this.handleChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value; // si ponemos name entre [] asignará el valor de la propiedad name del input (password o email) al valor value del input.\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      displayName: '',\n      email: '',\n      password: '',\n      confirmPassword: ''\n    };\n  }\n\n  render() {\n    // desectructuramos this.state en displayName, emai, password, etc, y se les pasa a los FormInput esos values\n    const _this$state2 = this.state,\n          displayName = _this$state2.displayName,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          confirmPassword = _this$state2.confirmPassword;\n    return React.createElement(SignUpContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(TitleForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"I do not have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Register with your e-mail and password\"), React.createElement(\"form\", {\n      className: \"sign-up-form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      type: \"text\",\n      name: \"displayName\",\n      value: displayName,\n      onChange: this.handleChange,\n      label: \"Display Name\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      type: \"email\",\n      name: \"email\",\n      value: email,\n      onChange: this.handleChange,\n      label: \"E-mail\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      type: \"password\",\n      name: \"password\",\n      value: password,\n      onChange: this.handleChange,\n      label: \"Choose Password\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      type: \"password\",\n      name: \"confirmPassword\",\n      value: confirmPassword,\n      onChange: this.handleChange,\n      label: \"Confirm Password\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"SIGN UP\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: (displayName, email, password) => dispatch(signUpStart({\n    displayName,\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/components/sign-up/sign-up.component.jsx"],"names":["React","FormInput","CustomButton","connect","signUpStart","auth","createUserProfileDocument","TitleForm","SignUpContainer","SignUp","Component","constructor","handleSubmit","event","preventDefault","state","displayName","email","password","confirmPassword","props","alert","handleChange","target","name","value","setState","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\n\nimport { signUpStart } from '../../redux/user/user.actions';\n\n\nimport { auth, createUserProfileDocument} from '../../firebase/firebase.utils';\n\nimport { TitleForm, SignUpContainer} from './sign-up.styles';\n\nclass SignUp extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tdisplayName:'',\n\t\t\temail:'',\n\t\t\tpassword:'',\n\t\t\tconfirmPassword:''\n\t\t}\n\t}\n\n\thandleSubmit = async event => {\n\n\t\tevent.preventDefault();\n\n\t\tconst {displayName, email, password, confirmPassword} = this.state;\n\t\tconst { signUpStart } = this.props;\n\n\t\tif (password !== confirmPassword) {\n\t\t\talert(\"Password and Confirm Password don't match\");\n\t\t\treturn;\n\t\t}\n\t\tsignUpStart(displayName,email,password);\n/*\t\ttry{\n// auth.createUserWithEmailAndPassword es un método de firebase, que te permite crear un nuevo usuario pasandole email and password.\n\t\t\tconst {user} = await auth.createUserWithEmailAndPassword(email,password);\n\t\t\tawait createUserProfileDocument(user,{displayName});\n// con esto dejaremos los inputs limpios, después de guardar el usuario\n\t\t\tthis.setState({\n\t\t\t\tdisplayName:'',\n\t\t\t\temail:'',\n\t\t\t\tpassword:'',\n\t\t\t\tconfirmPassword:''\n\t\t\t});\n\t\t} catch (err){\n\t\t\tconsole.error('error creando usuario',err.message);\n\t\t\talert('Error creating new user \\n' + err.message);\n\t\t}*/\n\t};\n\n\thandleChange = event=> {\n\t\tconst {name,value} = event.target;\n// si ponemos name entre [] asignará el valor de la propiedad name del input (password o email) al valor value del input.\n\t\tthis.setState({[name]:value});\n\t}\n\n\n\trender(){\n// desectructuramos this.state en displayName, emai, password, etc, y se les pasa a los FormInput esos values\n\t\tconst {displayName, email, password, confirmPassword} = this.state;\n\t\treturn (\n\t\t\t<SignUpContainer>\t\n\t\t\t\t<TitleForm>I do not have an account</TitleForm>\n\t\t\t\t<span>Register with your e-mail and password</span>\n\t\t\t\t<form className='sign-up-form' onSubmit={this.handleSubmit}>\n\t\t\t\t\t<FormInput \n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tname='displayName'\n\t\t\t\t\t\tvalue={displayName}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tlabel='Display Name'\n\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<FormInput \n\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\tname='email'\n\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tlabel='E-mail'\n\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<FormInput \n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\tname='password'\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tlabel='Choose Password'\n\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<FormInput \n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\tname='confirmPassword'\n\t\t\t\t\t\tvalue={confirmPassword}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tlabel='Confirm Password'\n\t\t\t\t\t\trequired />\n\t\t\t\t\t<CustomButton type='submit'>SIGN UP</CustomButton>\t\t\t\t\n\t\t\t\t</form>\n\t\t\t</SignUpContainer>\n\t\t)\n\t}\n}\n\nconst mapDispatchToProps = dispatch => ({\n\tsignUpStart:(displayName,email,password) => dispatch(signUpStart({displayName,email,password}))\n});\n\nexport default connect(null,mapDispatchToProps)(SignUp);"]},"metadata":{},"sourceType":"module"}