{"ast":null,"code":"var _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/components/header/header.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCartHidden } from '../../redux/cart/cart.selectors';\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\nimport { signOutStart } from '../../redux/user/user.actions';\nimport CartIcon from '../cart-icon/cart-icon.component';\nimport CartDropdown from '../cart-dropdown/cart-dropdown.component';\nimport { ReactComponent as Logo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/corona.svg\";\nimport { HeaderContainer, LogoContainer, OptionsContainer, OptionLink } from './header.styles';\n\nconst Header = ({\n  currentUser,\n  hidden,\n  signOutStart\n}) => React.createElement(HeaderContainer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(LogoContainer, {\n  to: \"/\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, React.createElement(Logo, {\n  className: \"logo\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n})), React.createElement(OptionsContainer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}, React.createElement(OptionLink, {\n  to: \"/shop\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, \"SHOP\"), React.createElement(OptionLink, {\n  to: \"/shop\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, \"CONTACT\"), currentUser ? React.createElement(OptionLink, {\n  as: \"div\",\n  onClick: signOutStart,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, \"SIGN OUT\") : React.createElement(OptionLink, {\n  to: \"/signin\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, \"SIGN IN\"), React.createElement(CartIcon, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n})), hidden ? null : React.createElement(CartDropdown, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n})); //si hidden es true, no se muestra nada, pero si es falso, se muestra el CartDropdown.\n//esta función es conveniente llamarla siempre igual. state es el argumento, el currentUser será state.user(que está en el root-reducer).currentUser(que está en el user-reducer)\n\n/*const mapStateToProps = state => ({\n\tcurrentUser: state.user.currentUser\n});*/\n// así es como se llamó la primera vez, cuando tienes que coger varias propiedades del state que hay en el store o en el root-reducer, se puede hacer desesctructuración.\n\n/* //Forma primitiva de llamar a mapStateToProps, antes de introducir los StateSelectors de memoized.\nconst mapStateToProps = ({ user: {currentUser}, cart:{hidden}}) => ({\n\tcurrentUser,\n\thidden\n}); */\n\n/* // esta es la siguiente forma de hacerlo, pero para no escribir muchas lineas con currentUser, hidden, and muchos mas, utilizaremos createStructuredSelector\nconst mapStateToProps = state => ({\n\tcurrentUser: selectCurrentUser(state),\n\thidden: selectCartHidden(state)\n}); */\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  hidden: selectCartHidden\n}); // haremos dispatch to State las props de signOutStart. Siempre se hace así.\n\nconst mapDispatchToProps = dispatch => ({\n  signOutStart: () => dispatch(signOutStart())\n}); //connect es una función de orden superior de la libreria react-redux, que se le puede pasar el componente Header, y obtiene otro componente nuevo.\n//connect es la función que nos ayudará a acceder al estado en el store con ayuda del reducer.\n// mapStateToProps coge el estado que está en root-reducer, y se accede a user de root-reducer, y después a currentUser que está en el user.reducer.\n// con este mapStateToProps podemos acceder al valor currentUser, y es el que se pasará como argumento a la propiedad currentUser a <Header currentUser={currentUser}</> \n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/components/header/header.component.jsx"],"names":["React","connect","createStructuredSelector","selectCartHidden","selectCurrentUser","signOutStart","CartIcon","CartDropdown","HeaderContainer","LogoContainer","OptionsContainer","OptionLink","Header","currentUser","hidden","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAwC,UAAxC;AAGA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,YAAT,QAA6B,+BAA7B;AAEA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;;AAMA,SACCC,eADD,EAECC,aAFD,EAGCC,gBAHD,EAICC,UAJD,QAKO,iBALP;;AAQA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAcC,EAAAA,MAAd;AAAqBT,EAAAA;AAArB,CAAD,KACd,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,aAAD;AAAe,EAAA,EAAE,EAAC,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,IAAD;AAAM,EAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADD,EAIC,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,UAAD;AAAY,EAAA,EAAE,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,EAIC,oBAAC,UAAD;AAAY,EAAA,EAAE,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJD,EAQEQ,WAAW,GACX,oBAAC,UAAD;AAAY,EAAA,EAAE,EAAC,KAAf;AAAqB,EAAA,OAAO,EAAER,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADW,GAGX,oBAAC,UAAD;AAAY,EAAA,EAAE,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAXF,EAcC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAdD,CAJD,EAqBES,MAAM,GAAG,IAAH,GAAS,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EArBjB,CADD,C,CA0BA;AAEA;;AAEA;;;AAEM;;AAEN;;;;;;AAKA;;;;;;;AAMA,MAAMC,eAAe,GAAGb,wBAAwB,CAAC;AAChDW,EAAAA,WAAW,EAAET,iBADmC;AAEhDU,EAAAA,MAAM,EAAEX;AAFwC,CAAD,CAAhD,C,CAIA;;AACA,MAAMa,kBAAkB,GAAGC,QAAQ,KAAI;AACtCZ,EAAAA,YAAY,EAAC,MAAIY,QAAQ,CAACZ,YAAY,EAAb;AADa,CAAJ,CAAnC,C,CAIA;AACA;AACA;AACA;;;AACA,eAAeJ,OAAO,CAACc,eAAD,EAAiBC,kBAAjB,CAAP,CAA4CJ,MAA5C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector} from 'reselect';\n\n\nimport { selectCartHidden } from '../../redux/cart/cart.selectors';\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\nimport { signOutStart } from '../../redux/user/user.actions';\n\nimport CartIcon from '../cart-icon/cart-icon.component';\nimport CartDropdown from '../cart-dropdown/cart-dropdown.component';\n\n\n\nimport { ReactComponent as Logo} from '../../assets/corona.svg';\n\nimport { \n\tHeaderContainer,\n\tLogoContainer,\n\tOptionsContainer,\n\tOptionLink\n} from './header.styles';\n\n\nconst Header = ({ currentUser,hidden,signOutStart }) => (\n\t<HeaderContainer>\n\t\t<LogoContainer to='/'>\n\t\t\t<Logo className='logo' />\n\t\t</LogoContainer>\n\t\t<OptionsContainer>\n\t\t\t<OptionLink to='/shop'>\n\t\t\t\tSHOP\n\t\t\t</OptionLink>\n\t\t\t<OptionLink to='/shop'>\n\t\t\t\tCONTACT\n\t\t\t</OptionLink>\n\t\t\t{\n\t\t\t\tcurrentUser ?\n\t\t\t\t<OptionLink as='div' onClick={signOutStart}>SIGN OUT</OptionLink>\n\t\t\t\t:\n\t\t\t\t<OptionLink to='/signin'>SIGN IN</OptionLink>\n\n\t\t\t}\n\t\t\t<CartIcon />\n\t\t</OptionsContainer>\n\t\t{\n\t\t\thidden ? null:(<CartDropdown />)\n\t\t}\n\t</HeaderContainer>\n);\n//si hidden es true, no se muestra nada, pero si es falso, se muestra el CartDropdown.\n\n//esta función es conveniente llamarla siempre igual. state es el argumento, el currentUser será state.user(que está en el root-reducer).currentUser(que está en el user-reducer)\n\n/*const mapStateToProps = state => ({\n\tcurrentUser: state.user.currentUser\n});*/ // así es como se llamó la primera vez, cuando tienes que coger varias propiedades del state que hay en el store o en el root-reducer, se puede hacer desesctructuración.\n\n/* //Forma primitiva de llamar a mapStateToProps, antes de introducir los StateSelectors de memoized.\nconst mapStateToProps = ({ user: {currentUser}, cart:{hidden}}) => ({\n\tcurrentUser,\n\thidden\n}); */\n/* // esta es la siguiente forma de hacerlo, pero para no escribir muchas lineas con currentUser, hidden, and muchos mas, utilizaremos createStructuredSelector\nconst mapStateToProps = state => ({\n\tcurrentUser: selectCurrentUser(state),\n\thidden: selectCartHidden(state)\n}); */\n\nconst mapStateToProps = createStructuredSelector({\n\tcurrentUser: selectCurrentUser,\n\thidden: selectCartHidden\n});\n// haremos dispatch to State las props de signOutStart. Siempre se hace así.\nconst mapDispatchToProps = dispatch =>({\n\tsignOutStart:()=>dispatch(signOutStart())\n})\n\n//connect es una función de orden superior de la libreria react-redux, que se le puede pasar el componente Header, y obtiene otro componente nuevo.\n//connect es la función que nos ayudará a acceder al estado en el store con ayuda del reducer.\n// mapStateToProps coge el estado que está en root-reducer, y se accede a user de root-reducer, y después a currentUser que está en el user.reducer.\n// con este mapStateToProps podemos acceder al valor currentUser, y es el que se pasará como argumento a la propiedad currentUser a <Header currentUser={currentUser}</> \nexport default connect(mapStateToProps,mapDispatchToProps)(Header);"]},"metadata":{},"sourceType":"module"}