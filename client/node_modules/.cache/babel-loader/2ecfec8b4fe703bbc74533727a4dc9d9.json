{"ast":null,"code":"import { takeLatest, call, put, all, select } from 'redux-saga/effects'; //se importa select, para que se pueda hacer llamadas al selector del state-redux. Para obtener el user logeado y los cartsItems en el redux.\n\nimport UserActionTypes from '../user/user.types';\nimport CartActionTypes from './cart.types';\nimport { getUserCartRef } from '../../firebase/firebase.utils'; //getUserCartRef es para obtener los items que tiene guardado en el carrito el usuario, guardados en Firebase.\n\nimport { clearCart, setCartFromFirebase } from './cart.actions'; //se importan los selectors de current user y cartItems del state de redux.\n\nimport { selectCurrentUser } from '../user/user.selectors';\nimport { selectCartItems } from './cart.selectors';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const itemData = yield call(getUserCartRef, user.id);\n  console.log(itemData); //yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      //solo se pasa el currentUser.id a getUserCartRef, y nos devuelve el cartRef (o documento al cual se la añadirá  el userId y los items que hay en el cartitem del state-redux, por cada item, será un elemento de un array\n      //nos devuelve el doc, donde existe el UsedId, y se hará un update de cartItems unicamente utilizando un update.\n      const cartRef = yield call(getUserCartRef, currentUser.id);\n      const cartItems = yield select(selectCartItems); //como se ha mencionado anteriormente, se hace un update del elemento cartItems que existe dentro de este documento.\n\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n} //listener o disparador, que cada vez que el usuario haga sign_in, se compruebe que items hay en Firebase, y los cargue al state de redux\n\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n} //listener para que cada vez que haya un cambio de items en el state de redux, actualice en Firebase la base de datos de los articulos guardados en firebase. \n\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.REMOVE_ITEM, CartActionTypes.ADD_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/client/src/redux/cart/cart.sagas.js"],"names":["takeLatest","call","put","all","select","UserActionTypes","CartActionTypes","getUserCartRef","clearCart","setCartFromFirebase","selectCurrentUser","selectCartItems","clearCartOnSignOut","checkCartFromFirebase","payload","user","itemData","id","console","log","updateCartInFirebase","currentUser","cartRef","cartItems","update","err","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","REMOVE_ITEM","ADD_ITEM","CLEAR_ITEM_FROM_CART","onSignOutSuccess","SIGN_OUT_SUCCESS","cartSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,MAArC,QAAkD,oBAAlD,C,CACA;;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,cAAT,QAA+B,+BAA/B,C,CACA;;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,gBAA/C,C,CACA;;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMV,GAAG,CAACM,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUK,qBAAV,CAAgC;AAACC,EAAAA,OAAO,EAACC;AAAT,CAAhC,EAAgD;AACrD,QAAMC,QAAQ,GAAG,MAAMf,IAAI,CAACM,cAAD,EAAgBQ,IAAI,CAACE,EAArB,CAA3B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAFqD,CAGrD;AACD;AAED,OAAO,UAAUI,oBAAV,GAAiC;AACtC,QAAMC,WAAW,GAAG,MAAMjB,MAAM,CAACM,iBAAD,CAAhC;;AACA,MAAIW,WAAJ,EAAiB;AACf,QAAI;AACR;AACA;AACM,YAAMC,OAAO,GAAG,MAAMrB,IAAI,CAACM,cAAD,EAAgBc,WAAW,CAACJ,EAA5B,CAA1B;AACA,YAAMM,SAAS,GAAG,MAAMnB,MAAM,CAACO,eAAD,CAA9B,CAJE,CAKR;;AACM,YAAMW,OAAO,CAACE,MAAR,CAAe;AAACD,QAAAA;AAAD,OAAf,CAAN;AACD,KAPD,CAOE,OAAOE,GAAP,EAAW;AACXP,MAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACD;AACF;AACF,C,CAED;;AACA,OAAO,UAAUC,YAAV,GAAyB;AAC9B,QAAM1B,UAAU,CAACK,eAAe,CAACsB,eAAjB,EAAiCd,qBAAjC,CAAhB;AACD,C,CACD;;AACA,OAAO,UAAUe,YAAV,GAAyB;AAC9B,QAAM5B,UAAU,CAAC,CACfM,eAAe,CAACuB,WADD,EAEfvB,eAAe,CAACwB,QAFD,EAGfxB,eAAe,CAACyB,oBAHD,CAAD,EAKbX,oBALa,CAAhB;AAMD;AAGD,OAAO,UAAUY,gBAAV,GAA6B;AAClC,QAAMhC,UAAU,CAACK,eAAe,CAAC4B,gBAAjB,EAAmCrB,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUsB,SAAV,GAAsB;AAC3B,QAAM/B,GAAG,CAAC,CACRF,IAAI,CAAC+B,gBAAD,CADI,EAER/B,IAAI,CAAC2B,YAAD,CAFI,EAGR3B,IAAI,CAACyB,YAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { takeLatest, call, put, all, select} from 'redux-saga/effects';\n//se importa select, para que se pueda hacer llamadas al selector del state-redux. Para obtener el user logeado y los cartsItems en el redux.\n\nimport UserActionTypes from '../user/user.types';\nimport CartActionTypes from './cart.types';\n\nimport { getUserCartRef } from '../../firebase/firebase.utils';\n//getUserCartRef es para obtener los items que tiene guardado en el carrito el usuario, guardados en Firebase.\nimport { clearCart, setCartFromFirebase } from './cart.actions';\n//se importan los selectors de current user y cartItems del state de redux.\nimport { selectCurrentUser } from '../user/user.selectors';\nimport { selectCartItems } from './cart.selectors';\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nexport function* checkCartFromFirebase({payload:user}) {\n  const itemData = yield call(getUserCartRef,user.id);\n  console.log(itemData);\n  //yield put(clearCart());\n}\n\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n  if (currentUser) {\n    try {\n//solo se pasa el currentUser.id a getUserCartRef, y nos devuelve el cartRef (o documento al cual se la añadirá  el userId y los items que hay en el cartitem del state-redux, por cada item, será un elemento de un array\n//nos devuelve el doc, donde existe el UsedId, y se hará un update de cartItems unicamente utilizando un update.\n      const cartRef = yield call(getUserCartRef,currentUser.id);\n      const cartItems = yield select(selectCartItems);\n//como se ha mencionado anteriormente, se hace un update del elemento cartItems que existe dentro de este documento.\n      yield cartRef.update({cartItems});\n    } catch (err){\n      console.log(err);\n    }\n  }\n}\n\n//listener o disparador, que cada vez que el usuario haga sign_in, se compruebe que items hay en Firebase, y los cargue al state de redux\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS,checkCartFromFirebase);\n}\n//listener para que cada vez que haya un cambio de items en el state de redux, actualice en Firebase la base de datos de los articulos guardados en firebase. \nexport function* onCartChange() {\n  yield takeLatest([\n    CartActionTypes.REMOVE_ITEM,\n    CartActionTypes.ADD_ITEM,\n    CartActionTypes.CLEAR_ITEM_FROM_CART\n  ]\n    ,updateCartInFirebase);\n}\n\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut )\n}\n\nexport function* cartSagas() {\n  yield all([\n    call(onSignOutSuccess),\n    call(onCartChange),\n    call(onUserSignIn)\n  ]);\n}"]},"metadata":{},"sourceType":"module"}