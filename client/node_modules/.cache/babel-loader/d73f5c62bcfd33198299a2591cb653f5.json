{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects'; // importaremos efectos que nos permiten hacer cosas similares a yield en los generadores de funciones (function*)\n// queremos dar funcionalidad que existe con thunk y las funciones que intercepta del archivo shop.actions.\n\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n} // la segunda función fetchCollectionAsync puede tener control de que ejecutar. Yield ejerce el poder de pausar, y poder determinar que hacer.\n// la primera función, captará si el action es FETCH_COLLECTIONS_START. si existen mas sagas, en otros archivos, al ser asyncrono, no bloqueará la aplicación, y se podrán ejecutar todos a la vez. La segunda función generadora que se pasa como segundo parametro de take, también será una generación de función, que tiene funcionalidades similares a async/await\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n} //estos sagas serán exportados a un root-saga, y este a su vez, será exportado al store, mediante un import, se podrán configurar el middleware para que escuche las actions el saga.","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionsAsync","console","log","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA2B,oBAA3B,C,CACA;AACA;;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACD,C,CACD;AACA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAML,SAAS,CAACC,eAAe,CAACK,uBAAjB,EAA0CJ,qBAA1C,CAAf;AACD,C,CAED","sourcesContent":["import { takeEvery, } from 'redux-saga/effects';\n// importaremos efectos que nos permiten hacer cosas similares a yield en los generadores de funciones (function*)\n// queremos dar funcionalidad que existe con thunk y las funciones que intercepta del archivo shop.actions.\n\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n}\n// la segunda función fetchCollectionAsync puede tener control de que ejecutar. Yield ejerce el poder de pausar, y poder determinar que hacer.\n// la primera función, captará si el action es FETCH_COLLECTIONS_START. si existen mas sagas, en otros archivos, al ser asyncrono, no bloqueará la aplicación, y se podrán ejecutar todos a la vez. La segunda función generadora que se pasa como segundo parametro de take, también será una generación de función, que tiene funcionalidades similares a async/await\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n\n//estos sagas serán exportados a un root-saga, y este a su vez, será exportado al store, mediante un import, se podrán configurar el middleware para que escuche las actions el saga.\n\n\n"]},"metadata":{},"sourceType":"module"}