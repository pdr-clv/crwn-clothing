{"ast":null,"code":"var _jsxFileName = \"/home/pdrclv/react/crwn-clothing/client/src/App.js\";\nimport React, { useEffect } from 'react'; // para no tener un componente de clase, y solo utilizar componentDidMount, es mejor utilizar useEffects de Hooks, y el componente será funcional.\n//capitulo 67: propiedades match,location y history. Muy interesante para ver como dirigirse a las rutas y url, utilizando history, :id, etc.\n\nimport { Route, Switch, Redirect } from 'react-router-dom'; //El componente Redirect vale para hacer redirect si se cumple alguna condición en la ruta de la url.\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from './redux/user/user.selectors'; // Route permite que se pueda hacer paginacion e ir a los /algo.\n//Switch se encarga de que en cuanto coincida una, ya no busque mas /algo\n\nimport HomePage from './pages/homepage/homepage.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'; //import { auth, createUserProfileDocument} from './firebase/firebase.utils';\n// se importa setCurrentUser, el action que obtendrá el CurrentUser el store, que está en el user.reducer y root-reducer. Se utilizará esta función en el dispatch (envio de currentUser como Props)\n\nimport { checkUserSession } from './redux/user/user.actions';\nimport { GlobalStyle } from './global.styles';\n\nconst App = ({\n  checkUserSession,\n  currentUser\n}) => {\n  useEffect(() => {\n    checkUserSession();\n  }, [checkUserSession]); //para que no se esté cargando cada vez que haya una modificación de usuario, se pasa el segundo argumento a useEffect.\n  //como no hay componente de nivel mas alto de App, podemos poner dentro del segundo parametro el array checkUserSession, y sólo hará el useEffect cada vez que haya un checkUsersession, que eso sólo sucederá cuando se cargue el componente App, y nada mas.\n  //si pasamos este componente de clase a funcional, gracias a Hooks, no hará falta constructor ni nada mas.  \n  //no necesitamos mas el constructor, porque el estado se guarddará en el root-reducer y el store del state\n\n  /*constructor() {\n    super();\n    this.state = {\n      currentUser: null\n    }\n  }*/\n\n  /* no necesitamos componentDidMount, lo haremos con useEffect de Hooks.\n    componentDidMount(){\n  // cuando se monta el componente, se carga App, y se mirará a ver si hay un usuario logueado. \n  // se pasará a user Saga el evento checkUserSession, y el saga lo interceptará, y dirigirá la actividad para dejar el usuari logueado, si existiria, o para no hacer nada, si no hubiera usuario logueado.\n  \n      const { checkUserSession } = this.props;\n  \n      checkUserSession()\n      \n  //hacemos una desestructuración de setCurrentUser de this.props.\n  //    const {setCurrentUser} = this.props;\n  \n    /*  this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth =>{\n        if (userAuth) {\n          const userRef = await createUserProfileDocument(userAuth);\n          \n          userRef.onSnapshot(snapShot =>{\n  // se reemplaza el this.setState por setCurrentUser\n  /*          this.setState({\n              currentUser:{\n                id:snapShot.id,\n                ...snapShot.data()\n              }\n            }) \n            setCurrentUser({\n              id:snapShot.id,\n              ...snapShot.data()\n            })\n          });\n        } else {\n          //this.setState({currentUser:userAuth});\n  // ya no hace falta hacer this.setState, y el currentUser: se le pasa directamente el objeto userAuth.\n          setCurrentUser(userAuth);\n        } \n  // hemos utilizado esta función para añadir la colección 'collections' a nuestro firebase. se ha pasado un collectionsArray que se ha cargado desde el selector, y se ha hecho un map y una desectructuración de title e item, que eran los únicos objetos que queriamos poner en el firebase.\n  // hemos pasado unicamente title e items, puesto que route o id, se calcularán id y route cuando carguemos la información desde backend al store de redux\n  //      addCollectionAndDocuments('collections',collectionsArray.map(({title,items})=>({title,items})));\n      });\n    }\n  \n    componentWillUnmount(){\n      this.unsubscribeFromAuth();\n    }*/\n  // para que funcione Swtich, hay que envolver Route\n  //Route necesita los parametros exact (tiene que ser exacto el /),path, que es la ruta que estará ingresada en el url, y component que es el componente (que normalmente será una página creada por nosotros, que se cargará)\n  // no hace falta hacer render, sólo return, ya que se pasa a componente funcional gracias a Hooks.\n  //  render(){\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(GlobalStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: HomePage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/shop\",\n    component: ShopPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/checkout\",\n    component: CheckoutPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/signin\",\n    render: () => currentUser ? React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }) : React.createElement(SignInAndSignUpPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }))); //  }\n}; // el path de shop no se pone exact, porque eventualmente se pasará parametros al url /shop/idproducto.\n//render dentro de Route te permite renderizar la página SigInAndSignOut si se cumple una condición del currentUser es null\n//cuando llamamos a mapStateToProps, disgregamos user del state. al ser App componente de clase, para utilizar el valor currentUser, hay que hacer this.props.currentUser\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); // podemos pasar el valor currentUser que está guardado en el root-reducer o el store del state. Lo podemos utilizar haciendo this.props.currentUser\n//checkUserSession se comprobará en componentDidMount para saber si hay un usuario logueado o o no.\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n}); //con mapDispatchToProps se enviará el cambio de estado registrado con setCurrentUser al rootReducer, a través del action. Con esto evitaremos tener que guardar el state en this.state, ya que se guardará en el rootreducer, y el evento this.setState.setCurrentUser se cambiará a this.props.SetCurrentUser (App es componente de clase, y se tiene que poner this.props antes de SetCurrentUser) que se encuentra en el action, y se pasa al reducer.\n//haciendo esto. setCurrentUser es una función que asigna el usuario al state, se puede utilizar haciendo this.props.setCurrentUser.\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/client/src/App.js"],"names":["React","useEffect","Route","Switch","Redirect","connect","createStructuredSelector","selectCurrentUser","HomePage","CheckoutPage","ShopPage","Header","SignInAndSignUpPage","checkUserSession","GlobalStyle","App","currentUser","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;;AACA,SAASC,KAAT,EAAeC,MAAf,EAAsBC,QAAtB,QAAsC,kBAAtC,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,iBAAT,QAAkC,6BAAlC,C,CAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,qCAArB;AAEA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC,C,CACA;AACA;;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,SAASC,WAAT,QAA4B,iBAA5B;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEF,EAAAA,gBAAF;AAAoBG,EAAAA;AAApB,CAAD,KAAuC;AAEjDf,EAAAA,SAAS,CAAC,MAAI;AACZY,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT,CAFiD,CAKnD;AACA;AACA;AACA;;AACE;;;;;;;AAOF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;;AACE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEL,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAEE,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,WAAlB;AAA8B,IAAA,SAAS,EAAED,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,SAAlB;AAA4B,IAAA,MAAM,EAAE,MAAMO,WAAW,GAAI,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,GAA4B,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAHJ,CADF,CA/DiD,CA2EnD;AACC,CA5ED,C,CA6EA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAGX,wBAAwB,CAAC;AAC/CU,EAAAA,WAAW,EAAET;AADkC,CAAD,CAAhD,C,CAIA;AAEA;;AACA,MAAMW,kBAAkB,GAAGC,QAAQ,KAAI;AACrCN,EAAAA,gBAAgB,EAAE,MAAMM,QAAQ,CAACN,gBAAgB,EAAjB;AADK,CAAJ,CAAnC,C,CAGA;AACA;;;AACA,eAAeR,OAAO,CAACY,eAAD,EAAiBC,kBAAjB,CAAP,CAA4CH,GAA5C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\n// para no tener un componente de clase, y solo utilizar componentDidMount, es mejor utilizar useEffects de Hooks, y el componente será funcional.\n//capitulo 67: propiedades match,location y history. Muy interesante para ver como dirigirse a las rutas y url, utilizando history, :id, etc.\nimport { Route,Switch,Redirect } from 'react-router-dom';\n//El componente Redirect vale para hacer redirect si se cumple alguna condición en la ruta de la url.\nimport { connect } from 'react-redux';\n\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from './redux/user/user.selectors'; \n\n// Route permite que se pueda hacer paginacion e ir a los /algo.\n//Switch se encarga de que en cuanto coincida una, ya no busque mas /algo\nimport HomePage from './pages/homepage/homepage.component';\n\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\n//import { auth, createUserProfileDocument} from './firebase/firebase.utils';\n// se importa setCurrentUser, el action que obtendrá el CurrentUser el store, que está en el user.reducer y root-reducer. Se utilizará esta función en el dispatch (envio de currentUser como Props)\nimport { checkUserSession } from './redux/user/user.actions';\n\nimport { GlobalStyle } from './global.styles';\n\nconst App = ({ checkUserSession, currentUser }) => {\n\n  useEffect(()=>{\n    checkUserSession()\n  }, [checkUserSession]);\n//para que no se esté cargando cada vez que haya una modificación de usuario, se pasa el segundo argumento a useEffect.\n//como no hay componente de nivel mas alto de App, podemos poner dentro del segundo parametro el array checkUserSession, y sólo hará el useEffect cada vez que haya un checkUsersession, que eso sólo sucederá cuando se cargue el componente App, y nada mas.\n//si pasamos este componente de clase a funcional, gracias a Hooks, no hará falta constructor ni nada mas.  \n//no necesitamos mas el constructor, porque el estado se guarddará en el root-reducer y el store del state\n  /*constructor() {\n    super();\n    this.state = {\n      currentUser: null\n    }\n  }*/\n\n/* no necesitamos componentDidMount, lo haremos con useEffect de Hooks.\n  componentDidMount(){\n// cuando se monta el componente, se carga App, y se mirará a ver si hay un usuario logueado. \n// se pasará a user Saga el evento checkUserSession, y el saga lo interceptará, y dirigirá la actividad para dejar el usuari logueado, si existiria, o para no hacer nada, si no hubiera usuario logueado.\n\n    const { checkUserSession } = this.props;\n\n    checkUserSession()\n    \n//hacemos una desestructuración de setCurrentUser de this.props.\n//    const {setCurrentUser} = this.props;\n\n  /*  this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth =>{\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        \n        userRef.onSnapshot(snapShot =>{\n// se reemplaza el this.setState por setCurrentUser\n/*          this.setState({\n            currentUser:{\n              id:snapShot.id,\n              ...snapShot.data()\n            }\n          }) \n          setCurrentUser({\n            id:snapShot.id,\n            ...snapShot.data()\n          })\n        });\n      } else {\n        //this.setState({currentUser:userAuth});\n// ya no hace falta hacer this.setState, y el currentUser: se le pasa directamente el objeto userAuth.\n        setCurrentUser(userAuth);\n      } \n// hemos utilizado esta función para añadir la colección 'collections' a nuestro firebase. se ha pasado un collectionsArray que se ha cargado desde el selector, y se ha hecho un map y una desectructuración de title e item, que eran los únicos objetos que queriamos poner en el firebase.\n// hemos pasado unicamente title e items, puesto que route o id, se calcularán id y route cuando carguemos la información desde backend al store de redux\n//      addCollectionAndDocuments('collections',collectionsArray.map(({title,items})=>({title,items})));\n    });\n  }\n\n  componentWillUnmount(){\n    this.unsubscribeFromAuth();\n  }*/\n// para que funcione Swtich, hay que envolver Route\n//Route necesita los parametros exact (tiene que ser exacto el /),path, que es la ruta que estará ingresada en el url, y component que es el componente (que normalmente será una página creada por nosotros, que se cargará)\n// no hace falta hacer render, sólo return, ya que se pasa a componente funcional gracias a Hooks.\n//  render(){\n  return (\n    <div>\n      <GlobalStyle />\n        <Header />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route exact path='/checkout' component={CheckoutPage} />\n          <Route exact path='/signin' render={() => currentUser ? (<Redirect to ='/'/>) : (<SignInAndSignUpPage />)} />\n        </Switch>\n    </div>\n  );\n//  }\n}\n// el path de shop no se pone exact, porque eventualmente se pasará parametros al url /shop/idproducto.\n//render dentro de Route te permite renderizar la página SigInAndSignOut si se cumple una condición del currentUser es null\n//cuando llamamos a mapStateToProps, disgregamos user del state. al ser App componente de clase, para utilizar el valor currentUser, hay que hacer this.props.currentUser\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\n\n// podemos pasar el valor currentUser que está guardado en el root-reducer o el store del state. Lo podemos utilizar haciendo this.props.currentUser\n\n//checkUserSession se comprobará en componentDidMount para saber si hay un usuario logueado o o no.\nconst mapDispatchToProps = dispatch =>({\n  checkUserSession: () => dispatch(checkUserSession())\n});\n//con mapDispatchToProps se enviará el cambio de estado registrado con setCurrentUser al rootReducer, a través del action. Con esto evitaremos tener que guardar el state en this.state, ya que se guardará en el rootreducer, y el evento this.setState.setCurrentUser se cambiará a this.props.SetCurrentUser (App es componente de clase, y se tiene que poner this.props antes de SetCurrentUser) que se encuentra en el action, y se pasa al reducer.\n//haciendo esto. setCurrentUser es una función que asigna el usuario al state, se puede utilizar haciendo this.props.setCurrentUser.\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}