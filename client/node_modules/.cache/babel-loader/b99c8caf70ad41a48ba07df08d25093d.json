{"ast":null,"code":"var _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport { SignInContainer, ButtonsContainer } from './sign-in.styles';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      //importante prevenir del comportamiento por defecto al hacer submit.\n      event.preventDefault();\n      const _this$state = this.state,\n            email = _this$state.email,\n            password = _this$state.password;\n      const emailSignInStart = this.props.emailSignInStart;\n      emailSignInStart(email, password);\n      /*\n      //no nos hará falta este try, catch, puesto que se hará esta llamada asincrona desde el saga.\n      \t\ttry {\n      \t\t\tawait auth.signInWithEmailAndPassword(email,password);\n      \t\t\talert('Success Signing In \\nWelcome!');\n      // limpiamos los inputs.\n      \t\t\tthis.setState({email:'',password:''});\t\n      \t\t} catch (err) {\n      \t\t\tconsole.error('Error logueando usuario',err.message);\n      \t\t\talert('Error logging in \\n' + err.message);\n      \t\t} \n      */\n    };\n\n    this.handleChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value; // si ponemos name entre [] asignará el valor de la propiedad name del input (password o email) al valor value del input.\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  render() {\n    const googleSignInStart = this.props.googleSignInStart;\n    return React.createElement(SignInContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Sign in with your e-mail and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      name: \"email\",\n      type: \"email\",\n      label: \"Email\",\n      onChange: this.handleChange,\n      value: this.state.email,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      name: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      onChange: this.handleChange,\n      value: this.state.password,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(ButtonsContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Sign In\"), React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: googleSignInStart,\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Sign In with Google\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","FormInput","CustomButton","connect","googleSignInStart","emailSignInStart","SignInContainer","ButtonsContainer","SignIn","Component","constructor","props","handleSubmit","event","preventDefault","state","email","password","handleChange","target","name","value","setState","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\n\nimport { googleSignInStart,emailSignInStart } from '../../redux/user/user.actions';\n\n\nimport {\n\tSignInContainer,\n\tButtonsContainer\n} from './sign-in.styles';\n\nclass SignIn extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state={\n\t\t\temail:'',\n\t\t\tpassword:''\n\t\t}\n\t}\n\n\thandleSubmit = async event => {\n//importante prevenir del comportamiento por defecto al hacer submit.\n\t\tevent.preventDefault();\n\n\t\tconst {email, password} = this.state;\n\t\tconst {emailSignInStart} = this.props;\n\t\temailSignInStart(email,password);\n/*\n//no nos hará falta este try, catch, puesto que se hará esta llamada asincrona desde el saga.\n\t\ttry {\n\t\t\tawait auth.signInWithEmailAndPassword(email,password);\n\t\t\talert('Success Signing In \\nWelcome!');\n// limpiamos los inputs.\n\t\t\tthis.setState({email:'',password:''});\t\n\t\t} catch (err) {\n\t\t\tconsole.error('Error logueando usuario',err.message);\n\t\t\talert('Error logging in \\n' + err.message);\n\t\t} \n*/\n\t}\n\n\thandleChange = event => {\n\t\tconst {name,value} = event.target;\n// si ponemos name entre [] asignará el valor de la propiedad name del input (password o email) al valor value del input.\n\t\tthis.setState({[name]:value});\n\t}\n\n\trender() {\n\t\tconst { googleSignInStart }=this.props;\n\t\treturn(\n\t\t\t<SignInContainer>\n\t\t\t\t<h2>I already have an account</h2>\n\t\t\t\t<span>Sign in with your e-mail and password</span>\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<FormInput name='email' type='email' \n\t\t\t\t\tlabel='Email'\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tvalue ={this.state.email} required/>\n\t\t\t\t\t<FormInput name='password' type='password' \n\t\t\t\t\tlabel='Password'\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tvalue ={this.state.password} required/>\n\t\t\t\t\t<ButtonsContainer>\n\t\t\t\t\t\t<CustomButton type='submit'>Sign In</CustomButton>\n\t\t\t\t\t\t<CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>\n\t\t\t\t\t\t\tSign In with Google\n\t\t\t\t\t\t</CustomButton>\n\t\t\t\t\t</ButtonsContainer>\n\t\t\t\t</form>\n\t\t\t</SignInContainer>\n\t\t)\n\t}\n}\n\nconst mapDispatchToProps = dispatch => ({\n\tgoogleSignInStart:()=> dispatch(googleSignInStart()),\n\temailSignInStart:(email,password) => dispatch(emailSignInStart({email,password}))\n});\n\n\nexport default connect(null,mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}