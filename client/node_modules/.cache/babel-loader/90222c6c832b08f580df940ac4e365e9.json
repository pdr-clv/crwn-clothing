{"ast":null,"code":"import _objectSpread from \"/home/pdrclv/react/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/pdrclv/react/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/pdrclv/react/crwn-clothing/client/src/components/sign-up/sign-up.component.jsx\";\nimport React, { useState } from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\nimport { signUpStart } from '../../redux/user/user.actions'; //ahora ya no necesitamos utilizar la libreria auth de firebase aquí.\n//import { auth, createUserProfileDocument} from '../../firebase/firebase.utils';\n\nimport { TitleForm, SignUpContainer } from './sign-up.styles';\n\nconst SignUp = ({\n  signUpStart\n}) => {\n  /*\tconstructor() {\n  \t\tsuper();\n  \n  \t\tthis.state = {\n  \t\t\tdisplayName:'',\n  \t\t\temail:'',\n  \t\t\tpassword:'',\n  \t\t\tconfirmPassword:''\n  \t\t}\n  \t} */\n  const _useState = useState({\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  const displayName = userCredentials.displayName,\n        email = userCredentials.email,\n        password = userCredentials.password,\n        confirmPassword = userCredentials.confirmPassword;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"Password and Confirm Password don't match\");\n      return;\n    }\n\n    signUpStart({\n      displayName,\n      email,\n      password\n    });\n    /*\t\tthis.setState({\n    \t\t\tdisplayName:'',\n    \t\t\temail:'',\n    \t\t\tpassword:'',\n    \t\t\tconfirmPassword:''\n    \t\t});*/\n\n    /*\t\ttry{\n    // auth.createUserWithEmailAndPassword es un método de firebase, que te permite crear un nuevo usuario pasandole email and password.\n    \t\t\tconst {user} = await auth.createUserWithEmailAndPassword(email,password);\n    \t\t\tawait createUserProfileDocument(user,{displayName});\n    // con esto dejaremos los inputs limpios, después de guardar el usuario\n    \t\t\tthis.setState({\n    \t\t\t\tdisplayName:'',\n    \t\t\t\temail:'',\n    \t\t\t\tpassword:'',\n    \t\t\t\tconfirmPassword:''\n    \t\t\t});\n    \t\t} catch (err){\n    \t\t\tconsole.error('error creando usuario',err.message);\n    \t\t\talert('Error creating new user \\n' + err.message);\n    \t\t}*/\n  };\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // si ponemos name entre [] asignará el valor de la propiedad name del input (password o email) al valor value del input.\n\n    setCredentials(_objectSpread({}, userCredentials, {\n      [name]: value\n    }));\n  }; // desectructuramos this.state en displayName, emai, password, etc, y se les pasa a los FormInput esos values\n\n\n  return React.createElement(SignUpContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(TitleForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"I do not have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Register with your e-mail and password\"), React.createElement(\"form\", {\n    className: \"sign-up-form\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    type: \"text\",\n    name: \"displayName\",\n    value: displayName,\n    onChange: handleChange,\n    label: \"Display Name\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    onChange: handleChange,\n    label: \"E-mail\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: handleChange,\n    label: \"Choose Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"password\",\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    onChange: handleChange,\n    label: \"Confirm Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"SIGN UP\")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/client/src/components/sign-up/sign-up.component.jsx"],"names":["React","useState","FormInput","CustomButton","connect","signUpStart","TitleForm","SignUpContainer","SignUp","displayName","email","password","confirmPassword","userCredentials","setCredentials","handleSubmit","event","preventDefault","alert","handleChange","target","name","value","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React , {useState} from 'react';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\n\nimport { signUpStart } from '../../redux/user/user.actions';\n\n//ahora ya no necesitamos utilizar la libreria auth de firebase aquí.\n//import { auth, createUserProfileDocument} from '../../firebase/firebase.utils';\n\nimport { TitleForm, SignUpContainer} from './sign-up.styles';\n\nconst SignUp = ({ signUpStart }) => {\n/*\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tdisplayName:'',\n\t\t\temail:'',\n\t\t\tpassword:'',\n\t\t\tconfirmPassword:''\n\t\t}\n\t} */\n\n\tconst [userCredentials,setCredentials] = useState({\n\t\tdisplayName:'',\n\t\temail:'',\n\t\tpassword:'',\n\t\tconfirmPassword:''\n\t});\n\n\tconst {displayName, email, password, confirmPassword} = userCredentials;\n\n\tconst handleSubmit = async event => {\n\n\t\tevent.preventDefault();\n\t\t\n\n\t\tif (password !== confirmPassword) {\n\t\t\talert(\"Password and Confirm Password don't match\");\n\t\t\treturn;\n\t\t}\n\t\tsignUpStart({displayName,email,password});\n/*\t\tthis.setState({\n\t\t\tdisplayName:'',\n\t\t\temail:'',\n\t\t\tpassword:'',\n\t\t\tconfirmPassword:''\n\t\t});*/\n/*\t\ttry{\n// auth.createUserWithEmailAndPassword es un método de firebase, que te permite crear un nuevo usuario pasandole email and password.\n\t\t\tconst {user} = await auth.createUserWithEmailAndPassword(email,password);\n\t\t\tawait createUserProfileDocument(user,{displayName});\n// con esto dejaremos los inputs limpios, después de guardar el usuario\n\t\t\tthis.setState({\n\t\t\t\tdisplayName:'',\n\t\t\t\temail:'',\n\t\t\t\tpassword:'',\n\t\t\t\tconfirmPassword:''\n\t\t\t});\n\t\t} catch (err){\n\t\t\tconsole.error('error creando usuario',err.message);\n\t\t\talert('Error creating new user \\n' + err.message);\n\t\t}*/\n\t};\n\n\tconst handleChange = event=> {\n\t\tconst {name,value} = event.target;\n// si ponemos name entre [] asignará el valor de la propiedad name del input (password o email) al valor value del input.\n\t\tsetCredentials({...userCredentials,[name]:value});\n\t}\n\n\n// desectructuramos this.state en displayName, emai, password, etc, y se les pasa a los FormInput esos values\n\treturn (\n\t\t<SignUpContainer>\t\n\t\t\t<TitleForm>I do not have an account</TitleForm>\n\t\t\t<span>Register with your e-mail and password</span>\n\t\t\t<form className='sign-up-form' onSubmit={handleSubmit}>\n\t\t\t\t<FormInput \n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='displayName'\n\t\t\t\t\tvalue={displayName}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tlabel='Display Name'\n\t\t\t\t\trequired />\n\t\t\t\t\t<FormInput \n\t\t\t\t\ttype='email'\n\t\t\t\t\tname='email'\n\t\t\t\t\tvalue={email}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tlabel='E-mail'\n\t\t\t\t\trequired />\n\t\t\t\t\t<FormInput \n\t\t\t\t\ttype='password'\n\t\t\t\t\tname='password'\n\t\t\t\t\tvalue={password}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tlabel='Choose Password'\n\t\t\t\t\trequired />\n\t\t\t\t\t<FormInput \n\t\t\t\t\ttype='password'\n\t\t\t\t\tname='confirmPassword'\n\t\t\t\t\tvalue={confirmPassword}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tlabel='Confirm Password'\n\t\t\t\t\trequired />\n\t\t\t\t<CustomButton type='submit'>SIGN UP</CustomButton>\t\t\t\t\n\t\t\t</form>\n\t\t</SignUpContainer>\n\t)\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n\tsignUpStart:userCredentials => dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(null,mapDispatchToProps)(SignUp);"]},"metadata":{},"sourceType":"module"}