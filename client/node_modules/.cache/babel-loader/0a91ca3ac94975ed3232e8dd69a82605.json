{"ast":null,"code":"import _objectSpread from \"/home/pdrclv/react/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSucess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nexport function* getUserAuthFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShot = yield userRef.get(); //    console.log(userSnapShot);\n\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapShot.id\n    }, userSnapShot.data())));\n  } catch (err) {\n    put(signInFailure(err));\n  }\n} //cuando se hace yield en onEmailSignInStart, se captura toda la action, y se tiene acceso como parametro al payload en este función de a continuación.\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    //    const userRef= yield auth.signInWithEmailAndPassword(googleProvider);\n    // lo desestructuramos el objeto userRef, y cogemos la propiedad user\n    const _ref = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref.user;\n\n    yield getUserAuthFromUserAuth(user);\n  } catch (err) {\n    put(signInFailure(err));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    //    const userRef= yield auth.signInWithPopup(googleProvider);\n    // lo desestructuramos el objeto userRef, y cogemos la propiedad user\n    const _ref2 = yield auth.signInWithPopup(googleProvider),\n          user = _ref2.user;\n\n    yield getUserAuthFromUserAuth(user);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* isUserAuthenticated() {\n  // crearemos una nueva utilidad de firebase, para comprobar si hay un usuario cargado, y si lo hay, lo cargamos al state, pero haremos unsubscribe, para no tenerlo ocupando memoria. sólo interesa captar cual es, y cargarlo al state.currentUser\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getUserAuthFromUserAuth(userAuth);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* signOutUser() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSucess());\n  } catch (err) {\n    yield put(signOutFailure(err));\n  }\n} // esta función recibe userCredentials, que son displayName, email and Password, se hace una desestructuración de objeto.\n\nexport function* signUpUser({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  //  yield console.log(email,password,displayName)\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user;\n\n    console.log(user);\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpUser);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutUser);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","googleProvider","auth","createUserProfileDocument","getCurrentUser","UserActionTypes","signInSuccess","signInFailure","signOutSucess","signOutFailure","signUpSuccess","signUpFailure","getUserAuthFromUserAuth","userAuth","userRef","userSnapShot","get","id","data","err","signInWithEmail","payload","email","password","signInWithEmailAndPassword","user","signInWithGoogle","signInWithPopup","isUserAuthenticated","signOutUser","signOut","signUpUser","displayName","createUserWithEmailAndPassword","console","log","onSignUpStart","SIGN_UP_START","onSignOutStart","SIGN_OUT_START","onCheckUserSession","CHECK_USER_SESSION","onEmailSignInStart","EMAIL_SIGN_IN_START","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport { googleProvider, \n  auth, \n  createUserProfileDocument,\n  getCurrentUser} from '../../firebase/firebase.utils';\n\nimport UserActionTypes from './user.types';\n\nimport { \n  signInSuccess, \n  signInFailure,\n  signOutSucess,\n  signOutFailure,\n  signUpSuccess,\n  signUpFailure\n} from './user.actions';\n\nexport function* getUserAuthFromUserAuth(userAuth){\n  try{\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShot = yield userRef.get();\n//    console.log(userSnapShot);\n    yield put (signInSuccess({id:userSnapShot.id, ...userSnapShot.data()}));\n  } catch(err){\n    put(signInFailure(err));\n  }\n}\n\n//cuando se hace yield en onEmailSignInStart, se captura toda la action, y se tiene acceso como parametro al payload en este función de a continuación.\nexport function* signInWithEmail({payload:{ email, password }}){\n  try{\n//    const userRef= yield auth.signInWithEmailAndPassword(googleProvider);\n// lo desestructuramos el objeto userRef, y cogemos la propiedad user\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getUserAuthFromUserAuth(user);\n  } catch(err){\n    put(signInFailure(err));\n  }\n}\n\nexport function* signInWithGoogle(){\n  try{\n//    const userRef= yield auth.signInWithPopup(googleProvider);\n// lo desestructuramos el objeto userRef, y cogemos la propiedad user\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getUserAuthFromUserAuth(user);\n  } catch(err){\n    yield put (signInFailure(err));\n  }\n}\n\nexport function* isUserAuthenticated () {\n// crearemos una nueva utilidad de firebase, para comprobar si hay un usuario cargado, y si lo hay, lo cargamos al state, pero haremos unsubscribe, para no tenerlo ocupando memoria. sólo interesa captar cual es, y cargarlo al state.currentUser\n  try{\n    const userAuth= yield getCurrentUser();\n    if (!userAuth) return;\n    yield getUserAuthFromUserAuth(userAuth);\n  } catch(err){\n    yield put(signInFailure(err))\n  }\n}\n\nexport function* signOutUser () {\n  try{\n    yield auth.signOut();\n    yield put(signOutSucess());\n  } catch(err){\n    yield put(signOutFailure(err));\n  }\n}\n// esta función recibe userCredentials, que son displayName, email and Password, se hace una desestructuración de objeto.\nexport function* signUpUser({payload:{ displayName,email, password }}) {\n//  yield console.log(email,password,displayName)\n  try{\n    const {user} = yield auth.createUserWithEmailAndPassword(email,password);\n    console.log(user)\n  } catch(err){\n    console.log(err)\n  }\n}\n\nexport function* onSignUpStart () {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpUser);\n}\n\nexport function* onSignOutStart () {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutUser);\n}\n\nexport function* onCheckUserSession () {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onEmailSignInStart(){\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onGoogleSignInStart(){\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* userSagas(){\n  yield all([call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(isUserAuthenticated),\n    call(onSignOutStart),\n    call(onSignUpStart)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}