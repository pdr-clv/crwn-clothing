{"ast":null,"code":"import styled, { css } from 'styled-components'; // generaremos bloques de estilo en css, importaremos { css }, y según que propiedad tenga el componente button, le cargará unos estilos u otros.\n\nconst buttonStyles = css`\n  background-color: black;\n  color: white;\n  border: none;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`; //para asegurarnos que siempre está en el centro, se pone display:felx y justify-content:center;\n\nconst invertedButtonStyles = css`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover{\n    background-color: black;\n    color: white;\n  }\n`;\nconst googleSignInStyles = css`\n  background-color: #4285f4;\n  color:white;\n\n  &:hover{\n    background-color: white;\n    color:#4285f4;\n    border:1px solid #4285f4;\n  }\n`; // como es javascript, no es CSS puro, podemos crear una función que según que props recibamos, podamos asignar unos estilos u otros al botón. Es para asignar si es botón es invertido, es GoogleSign, etc.\n\nconst getButtonStyles = props => {\n  if (props.isGoogleSignIn) {\n    return googleSignInStyles;\n  }\n\n  return props.inverted ? invertedButtonStyles : buttonStyles;\n};\n\nexport const CustomButtonContainer = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  cursor: pointer;\n  border-radius: 7px;\n  display: flex;\n  justify-content: center;\n  \n  ${getButtonStyles}\n\n`; // para asegurarnos que siempre está centrado el texto ponemos display:flex;  justify-content:center;\n// podemos llamar una función extrapolada con ${} dentro de los estilos CSS in js de botón, y según las props que reciba, pues se le dará el estilo inverted, googleSignIn o el default.","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/components/custom-button/custom-button.styles.jsx"],"names":["styled","css","buttonStyles","invertedButtonStyles","googleSignInStyles","getButtonStyles","props","isGoogleSignIn","inverted","CustomButtonContainer","button"],"mappings":"AAAA,OAAOA,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B,C,CACA;;AAEA,MAAMC,YAAY,GAAGD,GAAI;;;;;;;;;;CAAzB,C,CAWA;;AACA,MAAME,oBAAoB,GAAGF,GAAI;;;;;;;;;CAAjC;AAWA,MAAMG,kBAAkB,GAAGH,GAAI;;;;;;;;;CAA/B,C,CAWA;;AAEA,MAAMI,eAAe,GAAGC,KAAK,IAAG;AAC9B,MAAIA,KAAK,CAACC,cAAV,EAA0B;AACxB,WAAOH,kBAAP;AACD;;AAED,SAAOE,KAAK,CAACE,QAAN,GAAiBL,oBAAjB,GAAwCD,YAA/C;AACD,CAND;;AAQA,OAAO,MAAMO,qBAAqB,GAAGT,MAAM,CAACU,MAAO;;;;;;;;;;;;;;;;IAgB/CL,eAAgB;;CAhBb,C,CAoBP;AACA","sourcesContent":["import styled, { css } from 'styled-components';\n// generaremos bloques de estilo en css, importaremos { css }, y según que propiedad tenga el componente button, le cargará unos estilos u otros.\n\nconst buttonStyles = css`\n  background-color: black;\n  color: white;\n  border: none;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n//para asegurarnos que siempre está en el centro, se pone display:felx y justify-content:center;\nconst invertedButtonStyles = css`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover{\n    background-color: black;\n    color: white;\n  }\n`;\n\nconst googleSignInStyles = css`\n  background-color: #4285f4;\n  color:white;\n\n  &:hover{\n    background-color: white;\n    color:#4285f4;\n    border:1px solid #4285f4;\n  }\n`;\n\n// como es javascript, no es CSS puro, podemos crear una función que según que props recibamos, podamos asignar unos estilos u otros al botón. Es para asignar si es botón es invertido, es GoogleSign, etc.\n\nconst getButtonStyles = props =>{\n  if (props.isGoogleSignIn) {\n    return googleSignInStyles;\n  }\n\n  return props.inverted ? invertedButtonStyles : buttonStyles;\n};\n\nexport const CustomButtonContainer = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  cursor: pointer;\n  border-radius: 7px;\n  display: flex;\n  justify-content: center;\n  \n  ${getButtonStyles}\n\n`;\n\n// para asegurarnos que siempre está centrado el texto ponemos display:flex;  justify-content:center;\n// podemos llamar una función extrapolada con ${} dentro de los estilos CSS in js de botón, y según las props que reciba, pues se le dará el estilo inverted, googleSignIn o el default."]},"metadata":{},"sourceType":"module"}