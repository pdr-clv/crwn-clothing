{"ast":null,"code":"var _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/components/cart-icon/cart-icon.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\nimport { ReactComponent as ShoppingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/shopping-bag.svg\";\nimport { selectCartItemsCount } from '../../redux/cart/cart.selectors';\nimport './cart-icon.styles.scss';\n\nconst CartIcon = ({\n  toggleCartHidden,\n  itemCount\n}) => React.createElement(\"div\", {\n  className: \"cart-icon\",\n  onClick: () => toggleCartHidden(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(ShoppingIcon, {\n  className: \"shopping-icon\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  className: \"item-count\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, itemCount)); //se utiliza el selector selectCartItemsCount, definido en cart.selectors.js en la carpeta de redux/cart.\n//la forma primitiva sería valida, pero al hacer cualquier modificación en el state, en algúna propiedad que ni siquiera tiene que ver con cart, volvería a renderizar el componente, y sería innecesario.\n\n\nconst mapStateToProps = state => ({\n  itemCount: selectCartItemsCount(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleCartHidden: () => dispatch(toggleCartHidden())\n}); //ahora podemos utilizar la \"función\" toggleCatHidden en el componente CartIcon para cambiar al estado hidden.\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartIcon);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/components/cart-icon/cart-icon.component.jsx"],"names":["React","connect","toggleCartHidden","selectCartItemsCount","CartIcon","itemCount","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,+BAAjC;;AAEA,SAASC,oBAAT,QAAqC,iCAArC;AAEA,OAAO,yBAAP;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAACF,EAAAA,gBAAD;AAAoBG,EAAAA;AAApB,CAAD,KACf;AAAK,EAAA,SAAS,EAAC,WAAf;AAA2B,EAAA,OAAO,EAAE,MAAIH,gBAAgB,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,YAAD;AAAc,EAAA,SAAS,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE;AAAM,EAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA+BG,SAA/B,CAFF,CADF,C,CAQA;AACA;;;AACA,MAAMC,eAAe,GAAGC,KAAK,KAAI;AAC/BF,EAAAA,SAAS,EAAEF,oBAAoB,CAACI,KAAD;AADA,CAAJ,CAA7B;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCP,EAAAA,gBAAgB,EAAE,MAAMO,QAAQ,CAACP,gBAAgB,EAAjB;AADM,CAAL,CAAnC,C,CAGA;;;AACA,eAAeD,OAAO,CAACK,eAAD,EAAiBE,kBAAjB,CAAP,CAA4CJ,QAA5C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\nimport { ReactComponent as ShoppingIcon} from '../../assets/shopping-bag.svg';\nimport { selectCartItemsCount } from '../../redux/cart/cart.selectors';\n\nimport './cart-icon.styles.scss';\n\n\nconst CartIcon = ({toggleCartHidden , itemCount}) => (\n  <div className='cart-icon' onClick={()=>toggleCartHidden()}>\n    <ShoppingIcon className='shopping-icon'/>\n    <span className='item-count'>{ itemCount }</span>\n  </div>\n\n);\n\n//se utiliza el selector selectCartItemsCount, definido en cart.selectors.js en la carpeta de redux/cart.\n//la forma primitiva sería valida, pero al hacer cualquier modificación en el state, en algúna propiedad que ni siquiera tiene que ver con cart, volvería a renderizar el componente, y sería innecesario.\nconst mapStateToProps = state =>({\n  itemCount: selectCartItemsCount(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleCartHidden: () => dispatch(toggleCartHidden())\n});\n//ahora podemos utilizar la \"función\" toggleCatHidden en el componente CartIcon para cambiar al estado hidden.\nexport default connect(mapStateToProps,mapDispatchToProps)(CartIcon);"]},"metadata":{},"sourceType":"module"}