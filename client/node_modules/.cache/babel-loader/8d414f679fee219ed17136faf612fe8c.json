{"ast":null,"code":"import _objectSpread from \"/home/pdrclv/react/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/pdrclv/react/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/pdrclv/react/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport { SignInContainer, ButtonsContainer } from './sign-in.styles';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  //el estado estaba definido cuando el componente era una clase, ahora gracias a hooks es un componente funcional.\n\n  /*constructor(props) {\n  \tsuper(props);\n  \t\tthis.state={\n  \t\temail:'',\n  \t\tpassword:''\n  \t}\n  }*/\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  const email = userCredentials.email,\n        password = userCredentials.password;\n\n  const handleSubmit = async event => {\n    //importante prevenir del comportamiento por defecto al hacer submit.\n    event.preventDefault();\n    emailSignInStart(email, password);\n    /*\n    //no nos hará falta este try, catch, puesto que se hará esta llamada asincrona desde el saga.\n    \t\ttry {\n    \t\t\tawait auth.signInWithEmailAndPassword(email,password);\n    \t\t\talert('Success Signing In \\nWelcome!');\n    // limpiamos los inputs.\n    \t\t\tthis.setState({email:'',password:''});\t\n    \t\t} catch (err) {\n    \t\t\tconsole.error('Error logueando usuario',err.message);\n    \t\t\talert('Error logging in \\n' + err.message);\n    \t\t} \n    */\n  };\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // si ponemos name entre [] asignará el valor de la propiedad name del input (password o email) al valor value del input.\n\n    setCredentials(_objectSpread({}, userCredentials, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(SignInContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Sign in with your e-mail and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    onChange: handleChange,\n    value: userCredentials.email,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    onChange: handleChange,\n    value: userCredentials.password,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(ButtonsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Sign In\"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Sign In with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/pdrclv/react/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","FormInput","CustomButton","connect","googleSignInStart","emailSignInStart","SignInContainer","ButtonsContainer","SignIn","email","password","userCredentials","setCredentials","handleSubmit","event","preventDefault","handleChange","target","name","value","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\n\nimport { googleSignInStart,emailSignInStart } from '../../redux/user/user.actions';\n\n\nimport {\n\tSignInContainer,\n\tButtonsContainer\n} from './sign-in.styles';\n\nconst SignIn = ({emailSignInStart,googleSignInStart}) => {\n//el estado estaba definido cuando el componente era una clase, ahora gracias a hooks es un componente funcional.\n\t/*constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state={\n\t\t\temail:'',\n\t\t\tpassword:''\n\t\t}\n\t}*/\n\n\tconst [userCredentials,setCredentials] = useState({\n\t\temail:'',\n\t\tpassword:''\n\t})\n\n\tconst {email, password} = userCredentials;\n\n\tconst handleSubmit = async event => {\n//importante prevenir del comportamiento por defecto al hacer submit.\n\t\tevent.preventDefault();\n\n\t\temailSignInStart(email,password);\n/*\n//no nos hará falta este try, catch, puesto que se hará esta llamada asincrona desde el saga.\n\t\ttry {\n\t\t\tawait auth.signInWithEmailAndPassword(email,password);\n\t\t\talert('Success Signing In \\nWelcome!');\n// limpiamos los inputs.\n\t\t\tthis.setState({email:'',password:''});\t\n\t\t} catch (err) {\n\t\t\tconsole.error('Error logueando usuario',err.message);\n\t\t\talert('Error logging in \\n' + err.message);\n\t\t} \n*/\n\t}\n\n\tconst handleChange = event => {\n\t\tconst {name,value} = event.target;\n// si ponemos name entre [] asignará el valor de la propiedad name del input (password o email) al valor value del input.\n\t\tsetCredentials({...userCredentials, [name]:value});\n\t}\n\n\treturn(\n\t\t<SignInContainer>\n\t\t\t<h2>I already have an account</h2>\n\t\t\t<span>Sign in with your e-mail and password</span>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<FormInput name='email' type='email' \n\t\t\t\tlabel='Email'\n\t\t\t\tonChange={handleChange}\n\t\t\t\tvalue ={userCredentials.email} required/>\n\t\t\t\t<FormInput name='password' type='password' \n\t\t\t\tlabel='Password'\n\t\t\t\tonChange={handleChange}\n\t\t\t\tvalue ={userCredentials.password} required/>\n\t\t\t\t<ButtonsContainer>\n\t\t\t\t\t<CustomButton type='submit'>Sign In</CustomButton>\n\t\t\t\t\t<CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>\n\t\t\t\t\t\tSign In with Google\n\t\t\t\t\t</CustomButton>\n\t\t\t\t</ButtonsContainer>\n\t\t\t</form>\n\t\t</SignInContainer>\n\t)\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n\tgoogleSignInStart:()=> dispatch(googleSignInStart()),\n\temailSignInStart:(email,password) => dispatch(emailSignInStart({email,password}))\n});\n\n\nexport default connect(null,mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}